45
ZS 2026
My Feed
Network Wall
See more
Groups
E
Eng - Ruby san
T
Tech - Java
T
Tech - Maths
T
Tech - JS
T
Tech - Python
T
Tech - Shell
ZZ - Fun 'n' Gossip!
Z
ZZ - Sports
Search in all apps
37
TJ
Tech - Java
105
Members
Feeds
Manuals
Events
Survey
Did you know?
Classworks
Quiz
Assignments
workflow
Classwork Practice



Recent Feeds@mentionsAll

Janaarthanan Nandan has started a conversation.

11:21 AM
Daily Spot-The-Bug Quiz - 5
Method overloading related bug.
class Main {
    void method(int a, Integer b) {
        System.out.println("int, Integer");
    }
    void method(Integer a, int b) {
        System.out.println("Integer, int");
    }
    public static void main(String[] args) {
        Main ot = new Main();
        ot.method(5, 5);
    }
}
will this compile? if so, which method will be executed??

Sandhiya and Purnima V


Sandhiya
No this will not compile!!

Bug:
The call ot.method(5, 5); is ambiguous because Java can't decide between:
method(int, Integer)
method(Integer, int)
Both seem equally valid because Java automatically converts int into Integer, so the compiler throws an error.

Fix:
So, do explicit casting on one argument:
ot.method(5, (Integer) 5);  // Calls method(int, Integer)
ot.method((Integer) 5, 5);  // Calls method(Integer, int)
Now, the method call works without errors.


Purnima V
Compilation Error:
Since both methods are equally valid, Java cannot decide which one to call, resulting in a compilation error due to ambiguity.


How to Fix?
You can explicitly specify types:
ot.method(5, (Integer) 5);  // Calls method(int, Integer)
ot.method((Integer) 5, 5);  // Calls method(Integer, int)





Janaarthanan Nandan has started a conversation.

14 Mar, 10:23 AM
Daily Spot-The-Bug Quiz - 4
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
class Employee{
    private final int ID;
    private final String name;
    private final float salary;
    public Employee(int ID, String name, float salary){
        this.ID = ID;
        this.name = name;
        this.salary = salary;
    }
    void putEmployeeInDB() {
        //some code to insert this employee object into db
    }
}
public class Main {
    static Random random = new Random();
    public static void main(String[] args) {
        List<Employee> employeeList = new ArrayList<>();
        while (true) {
            for (int i = 0; i < random.nextInt(10); i++) {
                employeeList.add(employeeGenerator(employeeList.size()));
            }
            for (Employee employee : employeeList) {
                employee.putEmployeeInDB();
            }
            try {
                Thread.sleep(10000);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }
    }
    static Employee employeeGenerator(int ID){
        char[] nameArray = new char[20]; //max length for name is VARCHAR(20)
        for (int i = 0; i < random.nextInt(20); i++) {
            nameArray[i] = (char) random.nextInt(128);
        }
        String name = nameArray.toString();
        float salary = random.nextFloat();
        return new Employee(ID,name,salary);
    }
}
5 bugs, find them out!

Sandhiya


Sandhiya
package com.dailybugs;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
class Employee {
    private final int ID;
    private final String name;
    private final float salary;
    public Employee(int ID, String name, float salary) {
        this.ID = ID;
        this.name = name;
        this.salary = salary;
    }
    void putEmployeeInDB() {
        // some code to insert this employee object into db
        System.out.println("Inserting Employee -> ID: " + ID + ", Name: " + name + ", Salary: $" + salary);
    }
}
public class DailyBug4 {
    static Random random = new Random();
    public static void main(String[] args) {
        List<Employee> employeeList = new ArrayList<>();
        while (true) {
         //BUG5: random.nextInt(10) inside for loop condition changes every iteration.
         // FIX: Store the random number before the loop to ensure iteration count.
            int employeeCount = random.nextInt(10); 
            for (int i = 0; i < employeeCount; i++) {
                employeeList.add(employeeGenerator(employeeList.size()));
            }
            for (Employee employee : employeeList) {
                employee.putEmployeeInDB();
            }
            try {
                Thread.sleep(10000);
                System.out.println();
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }
    }
    static Employee employeeGenerator(int ID) {
        // BUG 1: Name array was always size 20, causing uninitialized characters in the string.
        // FIX: Determine name length first before creating the array.
        int nameLength = random.nextInt(20) + 1; // Ensure at least 1 character
        char[] nameArray = new char[nameLength];
        // BUG 2: Used random ASCII values, which included non-printable characters.
        // FIX: Generate only uppercase letters.
        for (int i = 0; i < nameLength; i++) {
            nameArray[i] = (char) ('A' + random.nextInt(26)); // Generates random uppercase letters
        }
        // BUG 3: Used `nameArray.toString()`, which returns memory address instead of actual string.
        // FIX: Use `new String(nameArray)` to properly create a string.
        String name = new String(nameArray);
        // BUG 4: Salary was generated using `random.nextFloat()`, which gave values between 0.0 and 1.0.
        // FIX: Scale salary properly to be between 30,000 and 100,000.
        float salary = 30000 + random.nextFloat() * 70000; // Generates salary between 30,000 and 100,000
        return new Employee(ID, name, salary);
    }
}
See more





Janaarthanan Nandan has started a conversation.

11 Mar, 01:06 PM
Daily Spot-The-Bug Quiz - 1
public class Main {
    public static void main(String[] args) {
        for (int i = Integer.MAX_VALUE - 2; i <= Integer.MAX_VALUE; i++) {
            System.out.println(i);
        }
        System.out.println("Loop ended");
    }
}

Here is a code with a bug, try to find out where the bug is and comment it below!

Sandhiya, Tamilselvan Arumugam and Bharathi Raja D

1 more comment


Dinesh Karthick Kumar
the Integer.MAX_VALUE=2147483647;
i=2147483647;
iteration1: i=2147483647-2=2147483645
iteration2: i=2147483646
iteration3: i=2147483647

after i++ the i will be=Integer.MIN_VALUE = -2147483648

it causes endless loop


Dwarakesh C S
public class Main {
    public static void main(String[] args) {
        for (int i = Integer.MAX_VALUE - 2; i <= Integer.MAX_VALUE; i++) {
            System.out.println(i);
            if (i == Integer.MAX_VALUE) break; 
        }
        System.out.println("Loop ended");
    }
}


Sandhiya
Bug:
The loop is expected to print numbers up to Integer.MAX_VALUE, but due to integer overflow, i++ makes it wrap around to Integer.MIN_VALUE, causing an infinite loop.

Fix:
Change <= to < so the loop stops before overflow happens!.
package com.dailybugs;
public class DailyBug1 {
    public static void main(String[] args) {
     for (int i = Integer.MAX_VALUE - 2; i < Integer.MAX_VALUE; i++) {
         System.out.println(i);
     }
        System.out.println("Loop ended");
    }
}
Now, the loop runs safely without infinite execution!.





Janaarthanan Nandan has started a conversation.

12 Mar, 09:54 AM
Daily Spot-The-Bug Quiz - 2
import java.util.*;
class SomeClassWithInt {
    private final int x;
    SomeClassWithInt(int x) {
        this.x = x;
    }
    @Override
    public boolean equals(Object obj) {
        return obj instanceof SomeClassWithInt && ((SomeClassWithInt) obj).x == this.x;
    }
}
public class Main {
    public static void main(String[] args) {
        Set<SomeClassWithInt> set = new HashSet<>();
        set.add(new SomeClassWithInt(10));
        System.out.println(set.contains(new SomeClassWithInt(10))); // Expected: true, but gives false, why?
    }
}
An OOP related bug here, try finding it out!

Sandhiya and Bharathi Raja D


Vijay Sai
public int hashCode() {
return x;
}
Add this method , then we can get expected output
why we getting this is because the contains method uses both equals() and hashCode() to check the object so when we check the variable's value we get to know similar HashSet.


Sandhiya
HashSet uses both equals() and hashCode() to check for duplicates.
equals() is overridden, but hashCode() is not, so Java defaults to Object’s hashCode(), which is based on memory address.
Since set.contains(new SomeClassWithInt(10)) first checks hashCode(), and two different objects have different memory addresses, their hash codes do not match. Because of this, HashSet does not even call equals() and directly returns false, even though an object with x = 10 exists.
Fix: Override hashCode() so that objects with the same x value have the same hash code:
@Override
public int hashCode() {
    return Integer.hashCode(x); // Ensures objects with the same x have the same hash
}
Now, contains() will correctly find the object and return true.





Janaarthanan Nandan has started a conversation.

13 Mar, 10:40 AM
Daily Spot-The-Bug Quiz - 3
public class Main {
    static int getValue() {
        try {
            return 10;
        } finally {
            return 20;
        }
    }
    public static void main(String[] args) {
        System.out.println(getValue());
    }
}
Try - Catch - Finally related bug, dig deeper into how try and finally works to find it out!

Sandhiya, Tamilselvan Arumugam, Dinesh Karthick Kumar and Sai Saran


Vishnu H
The getValue() method contains a try block that returns 10.However, there is a finally block which always executes.Since the finally block contains a return 20;, it overrides the return 10; from the try block.As a result, getValue() will always return 20, and that gets printed.


Dinesh Karthick Kumar
output:
20

If there is a return statement in both the try and finally blocks, the finally block's return value takes precedence.


Sandhiya
In Java, when a return statement runs inside a try block, Java remembers the return value but doesn't actually return immediately if there's a finally block.
Instead, before exiting the method, Java ensures that the finally block runs first. If the finally block also contains a return statement, it completely replaces the previous return value from try.so OUTPUT is : 20 (finally block return value..)





Prathika Kesavan has started a conversation.

21 Feb, 01:30 PM
(ab + bc)
this is for testing


Pavithra S has started a conversation.

03 Feb, 02:04 PM
Struts 1 java configuration steps - Feb 3, 2025














#struts1 #struts #framework

framework
struts
struts1
Ragavi L, Arunkumar P, Sandhiya and 4 more


Pavithra S has started a conversation.

22 Jan, 10:06 AM
Get data from database - Postgresql - Jan 22, 2024

comment your code here

#db #database #postgresql

postgresql
database
db
Arunkumar P, Sandhiya, Madhu Mitha and 5 more

16 more comments


Bharathi Raja D

Attachments

psqlFetch.class
2.98 KB
index.html
600 Bytes

Janaarthanan Nandan
Completed


Attachments

java.zip
11.14 KB

Jagan V





Janaarthanan Nandan has started a conversation.

30 Jan, 05:13 PM
Method References (Lambda Expression) in Java
I have written this code with some comments to explain the topic.

Attachments

Lambda.zip
1.5 KB
You, Ragavi L, Sandhiya and 3 more


Venkata Triveni has started a conversation.

23 Jan, 05:40 PM
Show Summary
Let’s go through why the unexpected output happened step by step.
The Lack of a Space in the Regex
The original regex:
/(?<firstname>\w+)(?<lastname>\w+)/
does not account for the space between the first and last names. This means:
The first capturing group (?<firstname>\w+) starts matching the string "John ray".
Since \w+ (word characters) is greedy, it will match as many characters as possible until it encounters something that does not match \w (like a space).
As a result, the first group captures "Johnray" (all the characters before the space).
Now, the regex attempts to match the second group (?<lastname>\w+), but:
This explains why you got the unexpected output:
firstname = "Joh", lastname = "n".
why n ?
The reason we're seeing "n" as the output for result.groups.lastname is because of greedy matching in the first capturing group (\w+).

Greedy Nature of the + Quantifier :
in the regex : /(?<firstname>\w+)(?<lastname>\w+)/;
The + quantifier means "one or more times" and is greedy. This means:
The first group (?<firstname>\w+) tries to consume as much of the string as possible, leaving only the minimal part of the string (if any) for the second group.
Since there is no clear delimiter to tell the regex where the first name ends and the last name starts, the first group captures everything ("Johnray") and leaves only "n" for the second group.

By updating the regex to:
/(?<firstname>\w+) (?<lastname>\w+)/
we are explicitly including a space (" ") between the two groups. Now:
The first group (?<firstname>\w+) matches "Joh".
It stops at the space because the space is not part of \w.
The space itself is matched (but not captured).
The second group (?<lastname>\w+) matches "ray" after the space.
This ensures the string is divided correctly into firstname and lastname.


i will explain this again tommorow.Thank you!


Ragavi L, Infanta Xena D L, Mohamed Haaris and 6 more


Pavithra S has started a conversation.

20 Jan, 05:45 PM
Create project Locale and ResourceBundle in servlet - Jan 20,2025

comment your assignment here

#locale #resourceBundle #servlet

servlet
resourcebundle
locale
Sandhiya, Vishnu H, Bharathi Raja D and Purnima V


Sandhiya
Attachments

LocalizedGreetingServlet.java
1.07 KB
messages_en_US.properties
24 Bytes
messages_fr_FR.properties
28 Bytes

Purnima V
Attachments

messages_en_IN.properties
18 Bytes
messages_en_GB.properties
47 Bytes
messages_en.properties
40 Bytes
messages.properties
33 Bytes
BrowserLanguageServlet.java
970 Bytes




Pavithra S has started a conversation.

17 Jan, 03:41 PM
Number Guessing game using servlet - Jan 17, 2025

comment your game (with Filter)

#servlet #guessingGame #filter #game

servlet
game
filter
guessinggame
You, Sandhiya, Bharathi Raja D and 10 more

2 more comments


Jagan V
Attachments

Register.java
3.29 KB
Login.java
2.75 KB
Guess.java
2.49 KB
Filterpro.java
1.59 KB

Madhu Mitha
Attachments

SignUp.java
2.29 KB
logout.java
522 Bytes
LoginCheck.java
1.6 KB
GameServlet.java
3.5 KB
GameFilter.java
1.47 KB
DatabaseConnect.java
658 Bytes
index.html
5.1 KB
GameUi.html
549 Bytes

Gowri Shankar
Attachments

RandomGame.zip
9.72 KB




Pavithra S has started a conversation.

17 Jan, 03:40 PM
Guessing Game using Servlet - Jan 17, 2025


comment your guessing game (without Filter)

#servlet #guessingGame #game

servlet
game
guessinggame
You, Sandhiya, Rakesh E and 8 more

5 more comments


Jagan V
Attachments

Guess.java
2.49 KB
Login.java
2.75 KB
Register.java
3.29 KB

Vijay Raghavan
Attachments

signup.jsp
3.54 KB
login.jsp
2.7 KB
game.jsp
3.12 KB
SignupServlet.java
2.01 KB
LoginServlet.java
1.91 KB
GameServlet.java
1.7 KB

Bharathi Raja D
Attachments

index.html
4.62 KB
guessGame.html
3.03 KB
guess.java
4.31 KB
gameManager.java
3.57 KB
connectionClass.java
788 Bytes




Jamuna S has started a conversation.

17 Jan, 05:57 PM
Did you know? Jan -17,2025


post your answer ........

Ragavi L, Sandhiya, Madhu Mitha and 9 more


Jamuna S
Capacity Expansion:
Since 2000 characters are being appended (1000 'a' characters and 1000 'b' characters), the capacity of the StringBuffer will grow as needed. Let’s break it down:
The initial capacity is 16.
After appending the first 16 characters, the capacity expands. Typically, it doubles the capacity when the size exceeds the current capacity. So:After appending 16 characters, the capacity might increase to 32.After appending another 32 characters (total of 48), the capacity might increase to 64.This doubling process continues as more characters are appended.


Sandhiya
Explanation:
StringBuffer Capacity Growth:
A StringBuffer starts with a default capacity of 16 characters if no initial capacity is specified.
When the internal storage becomes insufficient to accommodate new characters, the capacity is increased. The formula used is approximately:

new capacity = (old capacity * 2) + 2

Why 2302?:

The growth happens as follows:
Initial capacity = 16
After doubling several times:
16 → 34 → 70 → 142 → 286 → 574 → 1150 → 2302
At 2302, the capacity is sufficient to store 2000 characters.


While the StringBuffer is thread-safe, appending characters from two threads adds to the total string length, triggering these capacity expansions.





Jamuna S has started a conversation.

17 Jan, 05:47 PM
Show Summary
String
------------------
‌ Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object
Java String class provides a lot of methods to perform operations on strings such as compareTo( ), concat(), equals(), split(), length(), replace(), compareTo(), substring() etc.



‌How to create a string object?
> There are two ways to create String object:
> By string literal
>By new keyword
>Example: String s="welcome"; ---> String Literal
String s=new String("Welcome"); # (creates two objects and one reference variable)

‌In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool).


Immutablity
----------------
In Java, strings are immutable. It means that its value cannot be changed once a String object is created. If any operation appears to modify a String, what happens is the creation of a new String object. The original string remains unchanged.


StringBuffer – Mutable and Thread-Safe
Mutability:
Unlike String, StringBuffer is mutable, meaning its content can be changed without creating new objects. This makes it more efficient when performing frequent string manipulations, like appending or inserting.
Thread-Safety:
-----------------
StringBuffer is synchronized, making it thread-safe. This means that if multiple threads are modifying the same instance of a StringBuffer, it will handle synchronization internally to avoid concurrency issues.
However, synchronization introduces a slight performance penalty, which makes it slower than StringBuilder in single-threaded contexts.

StringBuilder
Mutability:
-------------
StringBuilder is also mutable, like StringBuffer. You can modify the string directly without creating new objects.

Performance:
----------------
The main advantage of StringBuilder is its speed. Unlike StringBuffer, it does not synchronize its methods, which makes it faster for use in single-threaded scenarios.
The lack of synchronization means that if multiple threads are accessing the same StringBuilder instance, it might lead to data inconsistency.

String.pdf1.47 MB

Ragavi L, Sandhiya, Madhu Mitha and 7 more


Srinidhi A has started a conversation.

17 Jan, 05:06 PM
Abstraction
--------------
Abstraction is a process of hiding the implementation or Business logic details and showing only functionality to the user.
Types of abstraction:
----------------------
Partial abstraction
Fully abstraction
Partial abstraction (abstract class):
--------------------------------------
Contain both abstract and non abstract methods
Use a keyword abstract in both class and abstract method
Contain keywords extends
We cant create object
Don't have any default keyword public and abstract we cant declare abstract method as private
Fully abstraction (Interface)
--------------------------------
Contain only the abstract methods
Contain keywords implements
Use a keyword interface instead of class
We cant create object
The keyword public and abstract is default no need to provide.
By interface, we can support the functionality of multiple inheritance.
Abstraction.pdf3.95 MB

Ragavi L, Sandhiya, Madhu Mitha and 9 more


Maha Krishnan has started a conversation.

06 Jan, 05:14 PM
Redirect Vs Forward:
Forwarding is done without letting client know that, It is used to do internal communication at server, while in Redirecting we are asking client go back and ask it over here.

Real life example:
Forwarding You went to post-office there are number of boxes and person sitting there, now one of them accepts your request and it internally forwards it to other responsible person to fulfill your request and at the end of the process you will get the result

Redirecting now the same person gives you a token which says go to window no5 and ask that person .


Ragavi L, Janarthanan Babu, Sandhiya and 18 more


Madhu Mitha has started a conversation.

06 Jan, 12:17 PM
Show Summary
Today Topic : Java Interface
1. What Is an Interface?
An interface in Java is a blueprint of a class. It defines a set of methods that a class must implement. Interfaces provide abstraction by allowing classes to implement their behavior without exposing implementation details.
Syntax:
interface MyInterface {
    void abstractMethod(); // Abstract method
}
By default, methods in an interface are public and abstract, and variables are public static final (constants).

2. Why Use Interfaces?
Achieve Abstraction: Interfaces allow you to define the "what" without the "how."
Multiple Inheritance: Unlike classes, interfaces enable a class to inherit from multiple sources.
Polymorphism: They provide a way to use multiple classes interchangeably if they implement the same interface.
3. Advanced Features of Interfaces
Default Methods (Java 8)
Before Java 8, interfaces could only have abstract methods. With the introduction of default methods, interfaces can now provide method implementations. This ensures backward compatibility when adding new methods to existing interfaces.
Example:
interface MyInterface {
    default void defaultMethod() {
        System.out.println("Default implementation");
    }
}

Private Methods (Java 9)
Java 9 introduced private methods in interfaces to encapsulate common logic. These methods cannot be accessed by implementing classes but can be used within other default or static methods of the interface.
Example:
interface MyInterface {
    default void method1() {
        commonLogic();
    }
    default void method2() {
        commonLogic();
    }
    private void commonLogic() {
        System.out.println("Common logic here!");
    }
}

Static Methods
Interfaces can also have static methods, which belong to the interface itself rather than any instance.
Example:
interface UtilityInterface {
    static void printMessage(String message) {
        System.out.println("Message: " + message);
    }
}
public class Test {
    public static void main(String[] args) {
        UtilityInterface.printMessage("Hello, World!");
    }
}

4. Practical Example: Multiple Inheritance
Interfaces are especially useful for achieving multiple inheritance, as Java does not allow multiple class inheritance.
Example:
interface A {
    void methodA();
}
interface B {
    void methodB();
}
class MyClass implements A, B {
    public void methodA() {
        System.out.println("Method A");
    }
    public void methodB() {
        System.out.println("Method B");
    }
}
public class Test {
    public static void main(String[] args) {
        MyClass obj = new MyClass();
        obj.methodA();
        obj.methodB();
    }
}
Output:
Method A
Method B

Attachments

INTERFACE.pdf
2.23 MB
Janarthanan Babu, Tamizharasan B, Sandhiya and 9 more


Pavithra S has started a conversation.

31 Dec 2024, 06:43 PM
Servlet workflow - Dec 31, 2024
Servlet.mp4
69 Views



#servlet #init() #doGet() #doPost() #destroy() #service() #server #workflow

servlet
workflow
server
service
init
destroy
dopost
doget
Attachments

Servlet.pdf
1.07 MB
You, Ragavi L, Janarthanan Babu and 18 more


Pavithra S has started a conversation.

28 Dec 2024, 11:30 AM
Did you know ? - Dec 28, 2024

How SQL injection works ?
sqlinjection_typecoercion.mp4
27 Views


#sqlinjection #mysqlMystery #mysql

mysql
mysqlmystery
sqlinjection
You, Ragavi L, Janarthanan Babu and 14 more


Pavithra S has started a conversation.

28 Nov 2024, 11:36 AM
Assignment : DbVisualizer in Java (MySql) - Nov 28, 2024


Refer : DbVisualizer tool
comment your assignment here ..

#assignments #dbvisualizer #java #mysql

mysql
java
dbvisualizer
assignments
Ragavi L, Janarthanan Babu, Mohamed Haaris and 17 more

19 more comments


Ayushman Phukan
Attachments

Main.java
1.36 KB
MenuHandler.java
3.23 KB
SQLCommands.java
6.58 KB
TableFormatter.java
1.8 KB

Vijay Raghavan
Attachments

AdminPanel.java
5.71 KB
dbVisualizer.java
18.02 KB
SendOTPtoEmail.java
3.87 KB
SendOTPtoMobile.java
753 Bytes
UserAuthentication.java
16.11 KB

Sivashankaran S
Attachments

UserHistory.java
1.18 KB
OtpSender.java
1.21 KB
AdminCrud.java
18.19 KB
AlignmentClass.java
8.39 KB
Crud.java
13.32 KB
Password.java
1.34 KB
SqlUpdator.java
9.62 KB
MySqlSign.java
4.98 KB
SendMessage.java
2.03 KB
GenerateTokens.java
4.89 KB




Pavithra S has started a conversation.

19 Dec 2024, 12:00 PM
Setup Classpath in bashrc file - Dec 19, 2024

did you know ?



#classpath #bashrc #tomcatServer #didyouknow

didyouknow
tomcatserver
bashrc
classpath
You, Ragavi L, Janarthanan Babu and 13 more


Padma T
example path/to/tomcat : /home/padma-zstch1463/apache-tomcat-9.0.80/lib/servlet-api.jar

Replace path/to/tomcat with the path of servlet-api.jar in your system.





Pavithra S has started a conversation.

07 Dec 2024, 04:00 PM
Did you know ? - Dec 7, 2024

Lamda Expression
LamdaExpression1.mp4
53 Views


#lamdaExpression #anonymousClass #lamda #didyouknow

didyouknow
lamda
anonymousclass
lamdaexpression
Ragavi L, Janarthanan Babu, Sandhiya and 13 more


Janaarthanan Nandan
Lambda expression has another advantage.
It doesn't store any anonymous inner classes, which is different from the regular way of writing interface or abstract class objects (which stores as anonymous inner class).
Here is the difference between the two ways
CLASS.class is the compiled byte code of CLASS.java
CLASS$Face.class is the compiled byte code of the Face interface that is inside the CLASS class.
CLASS&1.class is the compiled byte code of the anonymous inner class which has been created due to the Face interface object 'b' . We can see that the object created through lambda expression has created no anonymous inner classes.





Natarajan T has asked a question.

05 Dec 2024, 11:21 PM
Did You Know?
    
                                    Thread-safe.mp4                            
                        52 Views                
                    
    
 
#didyouknow #threadsafe #stringbuffer

didyouknow
stringbuffer
threadsafe
Ragavi L, Janarthanan Babu, Sandhiya and 12 more


PraveenKumar N has started a conversation.

05 Dec 2024, 10:09 PM
System.out and System.err run on separate streams. While System.out is buffered (stores data temporarily), System.err isn’t, hence System.err outputs may appear delayed.

To fix this, simply call System.out.flush() after each System.out call. This clears the buffer instantly, keeping your output in sync with your code.

If you're still having issues, you'll need to use Thread.sleep() to fix them.


Janarthanan Babu, Sandhiya, Bharathi Raja D and 10 more


Pavithra S has started a conversation.

22 Nov 2024, 02:24 PM
Assignment : Producer and Consumer - Nov 22, 2024

comment your assignment here

#assignments #producerConsumer

assignments
producerconsumer
Ranjith Kumar, Rakesh E, Sandhiya and 6 more

28 more comments


Infanta Xena D L
Completed...

Attachments

ThreadSync.java
1.59 KB

Purnima V
Attachments

DosaCounter.java
1.72 KB

Aadithya K S
Attachments

Consumer.java
1.32 KB
Producer.java
1.34 KB
ThreadSync.java
550 Bytes




Kishor Kumar has started a conversation.

04 Dec 2024, 01:16 PM
Show Summary
DB Visualizer

Connection Limit: In the free version of DbVisualizer there is no explicit limit on the number of Database Connections. However the practical limit could be affected by the following.

1. Database Server Limit:
The database server you're connecting to may have some restrictions. For Example:
-> PostgreSQL defaults to 100 connections.
-> MySQL defaults to 151 connections.
These limits can be adjusted on the server side.

2. Configuring my.cnf file:
The my.cnf file is located mostly in "/etc/mysql/my.cnf" or "/etc/my.cnf"
=> Bind Address:
Purpose: To allow or restrict connections from remote hosts'
Parameter: bind-address
0.0.0.0: Allows MySQL to listen on all available network interfaces.
127.0.0.1: Restricts MySQL to listen only on the local machine.

3. Changing Port Number:
=> In the my.cnf file, under the [mysqld] section, specify the port number i.e port = new_port_number. Replace new_port_number with any port number you want.
=> Ensure that any client configurations ([client] section in the same or another my.cnf file ) match the new port.
=> Update the firewall rules. If the firewall is active, allow the new port. Command : sudo ufw allow 3307/twp
=> Restart the MySQL to apply the changes. Command: sudo systemctl restart mysql
=> Verify the new port. Command: sudo netstat =tlnp | grep mysql.
=> Alternative Way: login to mysql in terminal and enter the following query. Query: SHOW VARIABLES LIKE 'port'. Now check if the port has changed.

How 0.0.0.0 works:
=> Listening Address:
When a service is configured to bind to 0.0.0.0, it listens for incoming requests on all available noetwork interfaces.
Example: A web server on 0.0.0.0:80 will respond to requests on:
-> 127.0.0.1:80 -> localhost
-> 192.168.1.10:80 -> local network
-> <public_ip> -> internet
=> Routing: Acts as a placeholder (eg., "default route").
=> Listening : Allows a service to accept connections on any network interface.
=> Initialization: Used when a device doesn't yet have an IP address.
=> Wildcard: Represents "any address" in configurations.

Janarthanan Babu, Sandhiya, Bharathi Raja D and 10 more


Pavithra S has started a conversation.

21 Nov 2024, 06:35 PM
Assignment : Private chat using socket - Nov 21, 2024

comment your assignment here

#privateChat #socket #assignments

assignments
socket
privatechat
Janarthanan Babu, Sandhiya, Bharathi Raja D and Purnima V

9 more comments


Purnima V
Attachments

PrivateChatServer.java
831 Bytes
PrivateChatSender.java
1.64 KB
PrivateChatReceiver.java
3.36 KB
PrivateChatClientC.java
157 Bytes
PrivateChatClientB.java
157 Bytes
PrivateChatClientA.java
156 Bytes

Bharathi Raja D
Attachments

client.java
877 Bytes
clientInfo.java
848 Bytes
msgHandler.java
1.5 KB
readThread.java
1.59 KB
server.java
1.98 KB
writeThread.java
746 Bytes
writeThreadClient.java
1.09 KB

Aadithya K S
Attachments

Client.java
2.59 KB
Message.java
683 Bytes
Server.java
3.92 KB




Pavithra S has started a conversation.

17 Oct 2024, 03:00 PM
Assignment - 020 - Quiz app with File handling - Oct 17, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-017-quiz-app-with-file-handling-oct-17-2024

#assignments

assignments
Ranjith Kumar, Janarthanan Babu, Sandhiya and 4 more

35 more comments


Purnima V
Attachments

QuizApp.java
2.84 KB

Tamilselvan Arumugam
Attachments

Question.java
471 Bytes
Player.java
668 Bytes
QuizApp.java
4.1 KB

Ranjith Kumar
Attachments

QuizApp.java
2.77 KB
questions.txt
3.94 KB




Pavithra S has started a conversation.

02 Dec 2024, 06:28 PM
Did you know ? - Dec 2, 2024

Child Threads running after the main thread ends
Child Threads Running After Main Thread Ends.mp4
59 Views


#thread #childThread #parentThread

parentthread
childthread
thread
Ragavi L, Janarthanan Babu, Sandhiya and 11 more


Abhineet Hariharan has started a conversation.

02 Dec 2024, 04:18 PM
FLUSH PRIVILEGES IN SQL:

FLUSH PRIVILEGES is a command in MySQL that tells the database to refresh and apply any changes made to user accounts or their permissions.

When you change permissions (like adding or removing a user, or updating their access), sometimes MySQL doesn't notice the changes right away. By running FLUSH PRIVILEGES, you're saying:
"Hey MySQL, look at the changes I made to the permissions and start using them now!"

Example:
You manually add a new user in the database tables (not the usual way).
MySQL doesn’t know about the new user yet.
You run FLUSH PRIVILEGES, and now the new user can log in.
If you're just using the GRANT or REVOKE commands to manage permissions, you don't need to worry about this command because MySQL does the refresh automatically.

Ragavi L, Janarthanan Babu, Mohamed Haaris and 15 more


Natarajan T has started a conversation.

28 Nov 2024, 10:48 AM
How ResultSet works?

https://connect.zoho.com/portal/zohoschools-2026/manual/workflow/article/how-resultset-work

#workflow #resultset

resultset
workflow
You, Ragavi L, Janarthanan Babu and 12 more


Pavithra S has started a conversation.

15 Nov 2024, 12:21 PM
Assignment : Group chat using socket - Nov 15, 2024

comment your assignment here

#assignments #socket

socket
assignments
Janarthanan Babu, Sandhiya, Jeevitha S and 6 more

35 more comments


Shriharan B
Client.java1.83 KB
ClientHandler.java1.6 KB
Server.java514 Bytes


Tamilselvan Arumugam
Attachments

MsgSender.java
841 Bytes
MsgReciver.java
672 Bytes
Client.java
1.45 KB
ServerMsgSender.java
464 Bytes
ClientLinker.java
965 Bytes
Server.java
1.68 KB
ServerMsgReciver.java
2.79 KB

Sivashankaran S
Attachments

SendMessage.java
1.4 KB
RecieveMessage.java
1004 Bytes
ServerNew.java
1.14 KB
ClientNew.java
908 Bytes
ServerSend.java
2.85 KB
ServerRecieve.java
1.14 KB




Natarajan T has started a conversation.

22 Oct 2024, 11:24 AM
Assignment 022 - File Handling - Oct 22, 2024.

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-022-file-handling-oct-22-2024

#filehandling

filehandling
Ranjith Kumar, Janarthanan Babu, Sandhiya and 6 more

62 more comments


Jeevitha S
NameGenerator.java397 Bytes
RandomFile.java1.13 KB
UniqueWords.java561 Bytes


Mohamed Haaris
Attachments

EmptyFileGenerator.java
1.22 KB
RandomFileGenerator.java
1.18 KB
SimpleFileMerger.java
1.29 KB

Tamilselvan Arumugam
Attachments

MergeFiles.java
1021 Bytes
firstFile.txt
77 Bytes
uniqueWords.java
1.39 KB
secondFile.txt
126 Bytes
ContentSorting.java
2.65 KB
output.txt
204 Bytes




Pavithra S has started a conversation.

25 Oct 2024, 02:21 PM
Socket example code - Oct 25,2025

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/socket-example-code-oct-25-2024

#classwork

classwork
Ranjith Kumar, Janarthanan Babu, Rakesh E and 9 more

29 more comments


Dwarakesh C S
Server.java1.49 KB
ClientHandler.java2.46 KB
Client.java2.66 KB


Sivashankaran S
Two Way Communication

Attachments

Client.java
1.04 KB
Server.java
1.17 KB

Bharath Kumar A
Attachments

BKChartClient.java
1.39 KB
BKChatServer.java
2.74 KB




Pavithra S has started a conversation.

25 Nov 2024, 03:49 PM
Did you know ? - Nov 25, 2024

Thread safe
threads didyouknow.mp4
54 Views


#threadSafe #didyouknow #codeExample

codeexample
didyouknow
threadsafe
You, Ragavi L, Janarthanan Babu and 17 more


Prathika Kesavan has started a conversation.

30 Oct 2024, 03:46 PM
Assignments : Topics Using Socket Communication and Runtime Class:

Distributed Software Installer:
Server sends the name of the software to be installed, and clients execute the installation using Runtime. For example,
Linux: sudo apt-get install <package>
Windows: Execute .exe installers remotely.




Network Health Monitor :

Monitor CPU, memory, and network usage across multiple machines in a network.
Clients periodically send data about CPU load, memory usage (free -h), and active network connections (netstat -tuln) to the server.




Remote System Control Application :
Design a remote control system where the server can perform system actions on connected clients, such as:
Shut down or restart clients remotely.
Log off users or lock the screen.




#assignments

assignments
Janarthanan Babu, Sandhiya, Bharathi Raja D and 4 more

39 more comments


Mohamed Haaris
Attachments

InstallerClient.java
643 Bytes
InstallerServer.java
1.23 KB

Anthony Raja. M
Attachments

runServer.java
2.98 KB
runtimeClient.java
2.39 KB

Arunkumar P
Attachments

Server.java
2.18 KB
Client.java
2.03 KB




Pavithra S has started a conversation.

22 Nov 2024, 09:55 AM
Did you know ? - Nov 21, 2024

== and .equals()
==&.equals().mp4
37 Views


#didyouknow

didyouknow
You, Ragavi L, Janarthanan Babu and 13 more


Pavithra S has started a conversation.

21 Nov 2024, 06:37 PM
Did you know ? - Nov 21, 2024

Thread uses - App specific examples
threaduses.mp4
19 Views



#threads #didyouknow #examples

didyouknow
examples
threads
You, Ranjith Kumar, Ragavi L and 9 more


Natarajan T has asked a question.

20 Nov 2024, 10:20 PM
Did you know?




#serialization #markerinterface #didyouknow

didyouknow
markerinterface
serialization
Ragavi L, Janarthanan Babu, Sandhiya and 13 more


Natarajan T has asked a question.

14 Nov 2024, 08:51 PM
Did you know?






#didyouknow  #accessmodifiers

didyouknow
accessmodifiers
View 4 comment(s)
You, Ragavi L, Janarthanan Babu and 27 more


Joel Raj
For Variable :
We can't change the access modifier of a variable in the same way we can change the access modifier of a method. Changing the access modifier of a variable results in shadowing, not overriding.





Natarajan T has started a conversation.

18 Nov 2024, 11:40 AM
Why this Exception Caused?
Screencast from 18-11-24 11:35:47 AM IST.webm
85 Views


Client.java1.28 KB
Server.java720 Bytes
Message.java778 Bytes

#serialization #classworks

classworks
serialization
Ranjith Kumar, Janarthanan Babu, Rakesh E and 9 more

4 more comments


Venkata Triveni
a NotSerializableException exception is thrown because an instance of a class must implement the Serializable interface. here the implementation is not there.


Vijay Sai
The message class doesn’t implement serializable interface hence it can’t use ObjectInputStream or ObjectOutputStream class


Janaarthanan Nandan
object was not marked as Serializable





Pavithra S has started a conversation.

16 Nov 2024, 10:56 AM
Did you know ? - Nov 16,2024







#didyouknow #atomicInteger #threadSafe

threadsafe
atomicinteger
didyouknow
Attachments

did you know.pdf
1.07 MB
Ragavi L, Janarthanan Babu, Sandhiya and 10 more


Joel Raj has started a conversation.

14 Nov 2024, 04:41 PM
Show Summary
Java Threads
Java Threads on a Single-Core Processor:

Concurrency (Not Parallelism) :
single-core processor, true parallelism cannot occur because there is only one CPU core to handle all tasks. However, Java threads can still run concurrently, meaning multiple threads can be executed one at a time, but the CPU switches between threads very quickly, giving the illusion that they are running simultaneously.

Thread Scheduling on Single-Core Systems:
single-core processor, the operating system’s thread scheduler is responsible for time-slicing. The scheduler allocates a small time slice (usually in milliseconds) to each thread.
The Java Virtual Machine does not control thread scheduling directly; it depends on the underlying operating system (OS) to manage thread execution.
Since there is only one core, the CPU cannot execute multiple threads at exactly the same time.

For example:
Thread 1 runs for a short period (example, 10 milliseconds).
Then Thread 2 runs for the next short period (example, 10 milliseconds).
Then Thread 3 runs, and so on.
This process is called context switching, and it gives the illusion that multiple threads are running concurrently, but at any given time, only one thread is actually executing.

Thread Context Switching:
Context switching is the process of saving the state of the current thread and loading the state of the next thread that will execute.
This involves storing and restoring the thread's CPU registers, program counter, and other state information.

Limitations in Single-Core Systems:
True parallelism (simultaneous execution) is not possible on a single-core processor.



Java Threads on a Multi-Core Processor:

Parallelism (True Parallel Execution):
multi-core processor, true parallelism can occur. Java threads can run on different cores simultaneously, so multiple threads can actually execute at the same time, which significantly improves performance for multi-threaded tasks.

Thread Scheduling on Multi-Core Systems:
In a multi-core processor, the operating system schedules threads to run on different CPU cores.
If there are more cores than threads, the operating system will assign each thread to a separate core, allowing them to execute simultaneously (in parallel).
If there are more threads than cores, the operating system will still allocate threads to the available cores. However, in this case, threads will share cores (i.e., some threads may run on the same core but at different times through context switching).

For example:
The OS can assign one thread to each core so that all 8 threads run simultaneously.
The OS will assign 2 threads per core (sharing cores), and some threads will still be running in parallel, but others will be context-switched in and out.

Advantages of Multi-Core Systems:
True Parallelism: With multiple cores, the system can perform real parallel execution, meaning that each thread can run on a separate core, leading to improved performance for multi-threaded workloads.
Better Load Distribution: With multiple threads and cores, the OS can distribute tasks more efficiently, reducing the load on any single core and improving overall throughput.



Key Differences Between Single-Core and Multi-Core Thread Execution:


Example of Thread Scheduling and Task Assignment

Single-Core Processor Example:
The OS assigns Thread 1 to the CPU.
Thread 1 runs for a short time slice (example, 10 millisecond).
The OS switches to Thread 2, giving it the CPU for the next time slice.
This process repeats, giving the illusion that both threads are running at the same time, even though only one is executing at any given moment.

Multi-Core Processor Example:
The OS assigns Thread 1 to Core 1 and Thread 2 to Core 2.
Both threads run simultaneously on different cores.
If there are more threads than cores, some threads will share cores, but the threads are still running in parallel as much as possible.

Conclusion
On a single-core processor, Java threads cannot run in parallel—only concurrent execution is possible, with the CPU rapidly switching between threads (context switching).
On a multi-core processor, Java threads can run in parallel, with each core executing its own thread simultaneously. This leads to improved performance, especially in multi-threaded applications.
The OS and Java Virtual Machine work together to allocate tasks to cores, and the number of available cores determines the extent of parallelism that can be achieved.

You, Jeshwanth S, Janarthanan Babu and 14 more


Jeshwanth S
Really NICE !! Very usefull !!





Pavithra S has started a conversation.

14 Nov 2024, 04:43 PM
Queue, Comparable, Comparator - Today's class topic - Nov 14, 2024

Comment your thoughts and doubts

#dsa #aops #queue #comparable #compareTo #comparator

comparator
compareto
comparable
queue
aops
dsa
You, Ranjith Kumar, Janarthanan Babu and 7 more


Pavithra S
- An interface that does not contain methods, fields, and constants is known as marker interface.
- Marker interface is used as a tag that inform the Java compiler by a message so that it can add some special behavior to the class implementing it.

Marker Interfaces in Java:

Serializable: Marks a class as capable of serialization
Cloneable: Marks a class as eligible for cloning, which is a way to create duplicate objects.
Remote: Marks a class as accessible remotely, typically used in Java RMI (Remote Method Invocation).





Pavithra S has started a conversation.

12 Nov 2024, 05:08 PM
Did you know ? - Nov 12, 2024



#didyouknow #covariantReturnType #class #interface

didyouknow
interface
class
covariantreturntype
You, Ragavi L, Janarthanan Babu and 11 more

3 more comments


Maha Krishnan
We can say covariant return type as it is the same thing representing in a various way based on conditions (to get a specific outcome).

Use Cases:
1. Flexibility: Give a more specific outcome based on user preference.
2. Type Safety: We can reduce most of the errors in compile time. So, we can correct return types in subclasses.

Real-life Example:
While you are using OTT's (like Netflix), you need not specify whether you are watching a movie or series. Here Media is a parent class; movies, series, or documentaries are subclasses. The covariant return type will give you an appropriate content type dynamically.


Pavithra S
Covariant return types are not allowed for primitive types in Java. Covariant return types only work with reference types (objects)


Pavithra S
Covariant Return Type Hierarchies for Common Java Classes

1. Object
- Superclass of all Java classes.
- Subclasses include Number, String, List, Map, Set, and many others.

2. Number
Covariant return types (subclasses):
- Integer
- Double
- Float
- Long
- Short
- Byte

3. Collection (interface)
Covariant return types:
- List
- ArrayList
- LinkedList
- Set
- HashSet
- TreeSet
- Queue
- PriorityQueue

4. Map (interface)
Covariant return types:
- HashMap
- TreeMap
- LinkedHashMap

6. Stream (interface)
Covariant return types:
- IntStream
- LongStream
- DoubleStream





Joel Raj has started a conversation.

11 Nov 2024, 04:30 PM
Polymorphism
Polymorphism in Java allows objects of different classes to be treated as objects of a common super class.
Java supports two types of polymorphism: compile-time (static) and runtime (dynamic).
Compile-time Polymorphism:
Method overloading occurs when two or more methods in the same class have the same name but different parameters (number or type).
Method Overloading (Compile-time): The method to be called is determined at compile time.
Runtime Polymorphism:
Runtime polymorphism is achieved through method overriding, where a subclass provides its own implementation of a method that is already defined in its super class.
Method Overriding (Runtime): The method to be called is determined at runtime based on the object's actual type (not the reference type).
Advantages of Polymorphism in Java:
- Promotes code reuse and reduces complexity.
- Allows for more flexible and maintainable code.

FIND:
1)Difference between method overloading and method overriding.

Attachments

Polymorphism.pdf
1.93 MB
Ragavi L, Janarthanan Babu, Sandhiya and 11 more


Maha Krishnan
Method Overloading:
1. We can pass parameters in more ways for same method(method name will not change).
It performs similar operations based on various user inputs.
2. The decision about which version of the method to call is made during compile time(Compile time Polymorphism).

Method Overriding:
1. In parent class and sub class have same class name, same method parameters and same return types.
We can modify or change that method.
2. The version of the overridden method that gets called is determined based on the actual object type at runtime(Run time Polymorphism).





Karthikeyan L has asked a question.

05 Nov 2024, 09:35 PM
Why This Doesn't Work?
interface Vehicle {
    abstract void travel();
}class Traveller {
    void travelling(Vehicle vehicle) {
        vehicle.travel();
    }
}class Bike implements Vehicle {
    public void travel() {
        System.out.println("Travel using Bike");
    }
    public void wheelie(){
        System.out.println("Enjoy the last few moments.");
    }
}class Car implements Vehicle {
    public void travel() {
        System.out.println("Travel using Car");
    }
}public class InterfaceDemo {
    public static void main(String[] args) {
        Vehicle bike = new Bike();
        Vehicle car = new Car();        
        bike.wheelie();    
    }
}
See more

View 4 comment(s)
Ranjith Kumar, Janarthanan Babu, Infanta Xena D L and 5 more


Natarajan T has asked a question.

06 Nov 2024, 09:50 PM
Did you know?


 
Did you know? 
 
What is the purpose of introducing default methods in interfaces?
In which scenarios should a default method be used within an interface? 
 
#questions #didyouknow

didyouknow
questions
View 2 comment(s)
Ranjith Kumar, Ragavi L, Janarthanan Babu and 7 more


Pavithra S has started a conversation.

07 Nov 2024, 06:08 PM
Interface in Java (with login example code) - Nov 7, 2024

Post your example / use case for interface
@all

#classwork #interface

interface
classwork
Attachments

Interface in java (1).pdf
691.25 KB
Ranjith Kumar, Janarthanan Babu, Mohamed Haaris and 7 more

7 more comments


Vijayaraghavan V
interface Account {
    void deductAmount(double amount);
    void displayBalance();
}
class SBIAccount implements Account {
    private double currentBalance;    
    
    public SBIAccount(double initialBalance) {
        this.currentBalance = initialBalance;
    }    
  
    @Override
    public void deductAmount(double amount) {
        if (amount > 0 && amount <= currentBalance) {
            currentBalance -= amount;
            System.out.println("Amount Deducted: " + amount);
        } 
        else {
            System.out.println("Invalid amount or insufficient funds.");
        }
    }   
  
    @Override
    public void displayBalance() {
        System.out.println("Available Balance: " + currentBalance);
    }  
}
public class BankDemo {
    public static void main(String[] args) {
        Account myAccount = new SBIAccount(25000); // Initialize with a different balance
        myAccount.displayBalance();
        myAccount.deductAmount(3000);
        myAccount.displayBalance();
    }
}
See more


Ayushman Phukan
Attachments

Car.java
616 Bytes
InterfaceForCar.java
201 Bytes

Bharath Kumar A
interface Notification {
    void sendNotification(String message);
}
class EmailNotification implements Notification {
    private String emailAddress;
    public EmailNotification(String emailAddress) {
        this.emailAddress = emailAddress;
    }
    @Override
    public void sendNotification(String message) {
        System.out.println("Sending Email to " + emailAddress + ": " + message);
    }
}
class SMSNotification implements Notification {
    private String phoneNumber;
    public SMSNotification(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }
    @Override
    public void sendNotification(String message) {
        System.out.println("Sending SMS to " + phoneNumber + ": " + message);
    }
}
class PushNotification implements Notification {
    private String deviceToken;
    public PushNotification(String deviceToken) {
        this.deviceToken = deviceToken;
    }
    @Override
    public void sendNotification(String message) {
        System.out.println("Sending Push Notification to device token " + deviceToken + ": " + message);
    }
}
class NotificationSystem {
    public static void main(String[] args) {
        Notification email = new EmailNotification("user@example.com");
        Notification sms = new SMSNotification("123-456-7890");
        Notification push = new PushNotification("device_token_abc123");
        sendAlert(email, "You have a new email!");
        sendAlert(sms, "You have a new SMS message!");
        sendAlert(push, "You have a new push notification!");
    }
    public static void sendAlert(Notification notification, String message) {
        notification.sendNotification(message);
    }
}
See more





Pavithra S has started a conversation.

13 Nov 2024, 10:20 AM
Need of default method in interface - Nov 13, 2024

DefaultMethod.pdf1.16 MB

#didyouknow #defaultMethod #interface

interface
defaultmethod
didyouknow
You, Ranjith Kumar, Janarthanan Babu and 8 more


Pavithra S has started a conversation.

12 Nov 2024, 05:10 PM
Covariant Return type - Nov 12, 2024
Interface & covariant.pdf521.37 KB

refer this for covariant return type in java

#didyouknow #covariantReturnType #class #interface

Janarthanan Babu, Mohamed Haaris, Sandhiya and 13 more


Janaarthanan Nandan has started a conversation.

11 Nov 2024, 04:20 PM
Show Summary
Abstract Classes, Interfaces and Their Advantages
Abstract Classes:
Classes that can contain abstract methods, concrete methods, and data members.
Extendable to other concrete classes, when the abstract methods are implemented and given a definition, OR when the class extending this class is also abstract.
Useful in cases where there are some common properties between multiple classes. The common properties can be written in the abstract classes, with different implementation in each child class
Such abstract class is AbstractList, which is extended by ArrayList class
Another example is Number class which is an abstract class which is implemented by Float , Integer, Long, Double classes (wrapper classes).
Interfaces:
Interfaces can contain abstracts methods.
Extendable to other interfaces, and Implementable to classes that implement these methods or abstract classes.
Useful in cases where multiple methods should be made sure for a class to contain, like a set of methods that should be present without fail in a class that implements Collection Interface (some such classes are ArrayList, LinkedList, etc.)

Attachments

Abstract Classes and Interfaces.pdf
848.04 KB
Ranjith Kumar, Ragavi L, Sandhiya and 8 more


Karthikeyan L has started a conversation.

05 Nov 2024, 09:46 PM
What's the output?
interface Vehicle {
    abstract void travel();
}
class Traveller {
    void travelling(Vehicle vehicle) {
        vehicle.travel();
    }
}
class Bike implements Vehicle {
    public void travel() {
        System.out.println("Travel using Bike");
    }
    public void wheelie(){
        System.out.println("Enjoy the last moments.");
    }
}
class Car implements Vehicle {
    public void travel() {
        System.out.println("Travel using Car");
    }
}
public class InterfaceDemo {
    public static void main(String[] args) {
        Vehicle bike = new Bike();
        Vehicle car = new Car();
        Vehicle bikeCar = (Car) bike;
        bikeCar.travel();
    }
}

Expected Output: Travel using Car

But I didn't get the expected result. Why? Can anyone explain?

Ranjith Kumar, Sandhiya, Vijayaraghavan V and 3 more

2 more comments


Janaarthanan Nandan
You have tried to cast a child class to another child class of a parent interface. This has resulted in wrong class casting error. Let's say a father has 2 sons, and each of the son have different skills, and let's say the skills of son1 is required somewhere. So we call son1, but instead of directly doing that we've casted son2 as son1, just because they have the same parent. The son2 might not have the skills of son1.

Class casting could be useful if a child class is casted as parent class (here it's not possible as it is an interface) because we can ensure everything the parent class has is sure to be present in the child class. Hope this answered your question😊


Janarthanan Babu
class Bike cannot be cast to class
Car


Vijayaraghavan V
the program tries to make bike act like a car but bike is actually a bike
since bike is not a car java will throw a exception error
this means the program will stop running because it cant turn a bike into a car





Prathika Kesavan has started a conversation.

15 Oct 2024, 10:22 PM
Did you know?




#didyouknow #encapsulation

didyouknow
encapsulation
You, Ragavi L, Venkata Triveni and 8 more

6 more comments


Jamuna S
class StudentDetails {
private String name;
private int age;

public void setName(String name) {
this.name = name;
}

public String getName() {
return name;
}

public void setAge(int age) {
this.age = age;
}

public int getAge() {
return age;
}


Venkata Triveni
public class Car {
private String model;
private int year;

public String getModel() {
return model;
}

public void setModel(String model) {
this.model = model;
}

public int getYear() {
return year;
}

public void setYear(int year) {
this.year = year;
}
}


Ranjith Kumar
class StudentDetails {
private String name;
private int age;
public void setName(String name) {
this.name = name;
}
public String getName() {
return name;
}
public void setAge(int age) {
this.age = age;
}
public int getAge() {
return age;
}





Pavithra S has started a conversation.

08 Nov 2024, 11:20 PM
Interface in Java - Nov 08, 2024
Interface in java .mp4
25 Views


#interface #workflow #classwork

interface
classwork
workflow
Ranjith Kumar, Ragavi L, Sandhiya and 8 more


Natarajan T has started a conversation.

30 Sep 2024, 05:49 PM
Assignment 20 - BrainBox App - Sep 30, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-20-brainbox-app-sep-30-2024

#inheritance #notesapp

notesapp
inheritance
Sandhiya, Dinesh Karthick Kumar, Bharathi Raja D and 5 more

51 more comments


Siva Karthik
NotesData.java989 Bytes
Note.java740 Bytes
NoteManager.java7.45 KB


Purnima V
Attachments

NoteApp.java
3.71 KB
Note.java
1.1 KB
Item.java
334 Bytes
FileManager.java
1.4 KB

Narmadha S
Attachments

MainNote.java
1.51 KB
Note.java
475 Bytes
NoteContent.java
875 Bytes




Pavithra S has started a conversation.

07 Nov 2024, 09:45 PM
Did you know ?



#didyouknow #system.in.read #InputStreamReader #BufferedReader

didyouknow
system
bufferedreader
inputstreamreader
Ragavi L, Janarthanan Babu, Sandhiya and 10 more


Suriya Narayanan
BufferedReader is generally the fastest and most efficient choice
System.in.read is inefficient for Large Input





Natarajan T has started a conversation.

05 Nov 2024, 11:03 AM
Example for interface in java - Nov 5, 2024



You, Ragavi L, Janarthanan Babu and 17 more

17 more comments


Sarvesh S
Attachments

multipleInterface.java
604 Bytes
Interface.java
1.29 KB
interfaceTwo.java
654 Bytes

Purnima V
Attachments

Main.java
1.96 KB

Shasanth Velluru
Attachments

InterfaceExampleThree.java
509 Bytes
InterfaceExampleTwo.java
1.34 KB
InterfaceExampleOne.java
513 Bytes




PraveenKumar N has started a conversation.

06 Nov 2024, 04:30 PM
Here, even though we have implemented both the PlaybackControls and SettingsAndPreferences interfaces in the VideoPlayer class, you still can't use the methods that are implemented from the SettingsAndPreferences interface ( like mute() ) using the PlaybackControls reference.
This is because the PlaybackControls interface doesn't define the mute() method, so when you reference the VideoPlayer object through PlaybackControls, only methods in PlaybackControls are accessible.
You'll either need to create a new object with a reference type of SettingsAndPreferences or use a VideoPlayer reference directly to access mute() method.


Attachments

InterfacePractice.zip
1.65 KB
Ranjith Kumar, Sandhiya, Bharathi Raja D and 3 more


Madhu Mitha has started a conversation.

05 Nov 2024, 12:16 PM



- Interfaces cannot have constructors

Ranjith Kumar, Infanta Xena D L, Tamizharasan B and 9 more


Pavithra S
Because Interfaces in Java are designed to define a contract for classes to implement. They can only contain static methods, constants, and abstract methods. Since interfaces do not create instances of themselves, constructors are unnecessary and thus not allowed.


Prathika Kesavan
This is the reason, interfaces are not allowing to create the objects. However, it assigns the implemented classes instances.


Prathika Kesavan
Good initiative.





Natarajan T has asked a question.

05 Nov 2024, 10:28 PM
Did you know?




Abstract Methods in Interface : 
 
Define a Contract: Abstract methods set a clear contract for implementing classes.
Ensure Consistency: They ensure that all implementing classes have consistent method signatures.
Enable Flexibility: Abstract methods allow different classes to provide varied implementations of the same behavior. 
 
#didyouknow

didyouknow
Ragavi L, Janarthanan Babu, Sandhiya and 13 more


Sai Saran has started a conversation.

05 Nov 2024, 12:02 PM


Variables in an interface are by default public final

Janarthanan Babu, Sandhiya, Bharathi Raja D and 12 more


Karthikeyan L
Also all variables in an interface are static (by default).





Infanta Xena D L has started a conversation.

05 Nov 2024, 12:21 PM
Error : Cannot reduce the visibility of the inherited method.

Reason : All methods declared in an interface are implicitly public! This means when implementing an interface, we must ensure that methods in class are also public. In this example, the start() and travel() methods in the Bike class should be public to match the interface's method visibility(i.e. public).


Ranjith Kumar, Sakthi Narmadha, Infanta Xena D L and 8 more


Karthikeyan L
Also all the methods of an interface are abstract methods (By default). So, no need to specify that too!





Joel Raj has started a conversation.

05 Nov 2024, 12:08 PM


Need to give Definition for all methods declared in Interface then only implement is possible.

Sandhiya, Bharathi Raja D, Jeevitha S and 10 more


Prathika Kesavan has started a conversation.

04 Nov 2024, 05:59 PM
Did you know?





#didyouknow #inputstreamreader #system.in

didyouknow
system
inputstreamreader
You, Ragavi L, Janarthanan Babu and 11 more


Pavithra S has shared a link.

23 Sep 2024, 11:42 AM
Classwork Practice - Latin Square - Sep 23, 2024

Refer this link

https://www.dcode.fr/latin-square

Latin Square Solver - Online Générator Tool
Tool to solve or generate Latin squares (generalization of sudoku). The Latin square is a square grid of size NxN comprising N distinct symbols distributed such that each row and column also have N di
www.dcode.fr
Ranjith Kumar, Sandhiya, Suriya Narayanan and 6 more

39 more comments


Sandhiya
Attachments

Board.java
805 Bytes
LatinSquare.java
4.43 KB

Tamilselvan Arumugam
Attachments

LatinSquare.java
2.87 KB

Siva Karthik
LatinSquare.java3.17 KB





Natarajan T has started a conversation.

25 Sep 2024, 02:04 PM
Assignment 019 - KenKen Puzzle,Magic Square and Sleep calculator - Sep 24, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-019-kenken-puzzle-magic-square-and-sleep-caluculator-sep-24-2024

credits : @Vijay Sai

Sandhiya, Vijay Sai, Bharathi Raja D and 2 more

24 more comments


Srinidhi A
MagicSquare.java4.93 KB


Tamilselvan Arumugam
Attachments

magicSquare.java
4.01 KB

Sandhiya
Attachments

SleepCalculator.java
2.03 KB




Prathika Kesavan has started a conversation.

01 Nov 2024, 05:15 PM
Did you know ?





So, how does System.out.println() really work?
First thought: println() is a method. But where’s it coming from?
Aha! It’s actually part of the PrintStream class!
And System.out? That’s a static object of PrintStream, defined inside the System class.
So, every time we use System.out.println(), we’re calling println() on System’s out object!


#didyouknow

didyouknow
Ragavi L, Janarthanan Babu, Sandhiya and 12 more


Natarajan T has started a conversation.

29 Oct 2024, 12:43 PM
Runtime class - Oct 29 , 2024 .



#runtime #cmd

cmd
runtime
Ragavi L, Sandhiya, Mohamed Haaris and 11 more


Pavithra S has started a conversation.

29 Oct 2024, 10:37 AM
BufferedReader and InputStreamReader in java - Oct 29, 2024




#classwork #sampleCode #example

example
samplecode
classwork
Ranjith Kumar, Ragavi L, Sandhiya and 8 more


Joel Raj has started a conversation.

29 Oct 2024, 10:20 AM
OSI Reference Model :


Ranjith Kumar, Sandhiya, Mohamed Haaris and 7 more


Mohamed Haaris
Understood the Operations.





Prathika Kesavan has started a conversation.

25 Oct 2024, 11:29 AM
Did you know?







#didyouknow

didyouknow
Ragavi L, Janarthanan Babu, Sandhiya and 10 more


Natarajan T has started a conversation.

24 Oct 2024, 10:35 PM
Did you know?​​





Ranjith Kumar, Ragavi L, Janarthanan Babu and 9 more


Mohamed Haaris has started a conversation.

24 Oct 2024, 02:41 PM
Show Summary
Port Usage In Java
Today, we covered the topic of port usage in Java, focusing on establishing communication between a server and a client using socket programming. This class explored the fundamental concepts of networking in Java, specifically the role of ports in facilitating data exchange over a network.

Key Components:
1.Server Implementation using ServerSocket

The Server utilizes the ServerSocket class to create a server socket that listens on a designed port, allowing it to accept incoming client connections.
Upon receiving a connection request from a client, the server creates a new Socket object to handle communication with that specific client

2.Client Implementation using Socket

The client establishes a connection to the sever using the Socket class, specifying the server's IP address and port number to connect.
Once connected,the client can send data to the server and receive responses through input and output streams associated with the Socket object.
The client can be designed to handle various servers responses and manage data interchange effectively
3.Error Handling and Logging

Error handling mechanisms are implemented to manage exceptions, such as IOExpection, ensuring that both the server and client can handle connectivity issues effectively.
Logging functionality is included to track connections, disconnections, and errors during communication.

4.Resource Management

Emphasis is placed on properly closing the ServerSocket and Socket connections, as well as input and output streams, to prevent resources leaks and ensure efficient resource management.

Overall, this class provided a comprehensive understanding of how to establish a reliable network connection in java using ServerSocket and Socket classes, The knowledge gained will serve as a foundation for building more complex client-server applications,ensuring effective data transmission and resource management in network programming.

Sandhiya, Bharathi Raja D, Sucharitha Kandru and 14 more


Prathika Kesavan has started a conversation.

23 Oct 2024, 11:07 PM
Did you know?









Ragavi L, Janarthanan Babu, Sandhiya and 10 more


Prathika Kesavan has started a conversation.

22 Oct 2024, 10:36 PM
Did you know?






#didyouknow

didyouknow
Ranjith Kumar, Ragavi L, Janarthanan Babu and 9 more


Prathika Kesavan has started a conversation.

16 Oct 2024, 10:44 PM
Did you know?



#didyouknow #string #jdk11

didyouknow
string
jdk11
You, Ragavi L, Sandhiya and 10 more

3 more comments


Bharathi Raja D
class repeatDash{
public static void main(String [] args){
String uScore="_";
System.out.println("Fill in the blanks \n");
System.out.println("2 + 2 = "+uScore.repeat(5)+" ?");
}
}
output :
Fill in the blanks
2 + 2 = _____ ?


Jamuna S
class repeatDash{
public static void main(String [] args){
String underscore="_";
System.out.println("Fill in the blanks \n");
System.out.println("mark is"+underscore.repeat(5));
}
}
output :
Fill in the blanks
mark is _____ ?


Venkata Triveni
class HelloWorld {
public static void main(String[ ] args) {
String dash = "-";
String repeatedDashes = dash.repeat(10);
System.out.println(repeatedDashes);
}
}
//output ----------





Pavithra S has started a conversation.

21 Oct 2024, 12:43 PM
026 - Log File example code - Oct 21, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/026-logging-oct-21-2024

#classwork #logging #logFile

classwork
logfile
logging
Ranjith Kumar, Vijay Sai, Bharathi Raja D and 4 more


Pavithra S has started a conversation.

13 Sep 2024, 02:27 PM
Assignment 017 - Guessing quiz game - Sep 13, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-017-guessing-quiz-game-sep-13-2024

#Assignments

assignments
Ranjith Kumar, Sandhiya, Jeevitha S and 3 more

13 more comments


Nikhil Ignatius Vidya Kanickairaj
Attachments

MovieEmojiQuiz.java
6.49 KB

Bharath Kumar A

Attachments

MovieEmojiQuiz.java
7.85 KB

Ranjith Kumar
completed :


Attachments

JavaQuiz.java
3.29 KB




Natarajan T has started a conversation.

10 Sep 2024, 06:40 PM
Assignment 017 - Emoji Quiz - Sep 10 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/emoji-quiz-static-keyword-sep-10-2024

#emojiquiz

emojiquiz
Ranjith Kumar, Sandhiya, Rakesh E and 7 more

32 more comments


Srinidhi A
Quizgame.java3.59 KB


Sandhiya
Attachments

EmojiSurvivalGame.java
2.49 KB
DayManager.java
2.85 KB
CraftItems.java
2.04 KB
Resources.java
2.02 KB
DoThings.java
976 Bytes
Player.java
1.65 KB
CountDownTimer.java
1.04 KB
ScannerObject.java
176 Bytes

Ranjith Kumar
completed :


Attachments

JavaQuiz.java
3.29 KB




Pavithra S has started a conversation.

14 Aug 2024, 02:22 PM
Assignment - 010 - Standard Deviation Calculator - Aug 14, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-010-calculate-the-average

Ranjith Kumar, Infanta Xena D L, Sandhiya and 5 more

52 more comments


Abinesh Jv
Attachments

StandardDeviationCalculator.java
2.72 KB

Sandeep P
Completed

Attachments

Assignment10.zip
1.68 KB

Ranjith Kumar
completed :


Attachments

StandardDeviationCalculator.java
2.85 KB




Prathika Kesavan has started a conversation.

06 Aug 2024, 11:21 AM
Assignment 008 - Emoji Identifier - 06 Aug 2024 :

Please come up with your own way of using methods using String class, methods and unicode.
https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-008-emoji-finder

#assignments #emoji

assignments
emoji
Ranjith Kumar, Sandhiya, Bharathi Raja D and 4 more

54 more comments


Abinesh Jv
Attachments

EmojiCounter.java
1.28 KB
EmojiReplacer.java
699 Bytes

Sandeep P
Completed

Attachments

Assignment8.zip
2.97 KB

Ranjith Kumar
completed :


Attachments

EmojiFinder.java
1.62 KB




Prathika Kesavan has started a conversation.

13 Oct 2024, 06:27 PM
Did you know?


#didyouknow

didyouknow
Ragavi L, Ranjith Kumar, Rakesh E and 4 more


Bharath Kumar A
import static java.lang.Math.*;
public class MathExample {
public static void main(String[ ] args) {
System.out.println(sqrt(25));
}
}
//output
5.0
The use of static imports, which enables us to call the sqrt() method directly without the Math. prefix. The program calculates the square root of 25, yielding an output of 5.0. By utilizing static imports, we can simplify our code, particularly when frequently using static members, resulting in cleaner and more readable code.





Natarajan T has started a conversation.

06 Sep 2024, 02:49 PM
Assignment - 016 - Captcha Generator - 06 Sep 2024


https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/captcha-generator-06-sep-2024

#constructor #captchagenerator

constructor
captchagenerator
Ranjith Kumar, Sandhiya, Jeevitha S and 4 more

56 more comments


Sandeep P
Completed

Attachments

Assignment16.zip
1.78 KB

Ranjith Kumar
Completed :

Attachments

CaptchaGenerator.java
5.71 KB

Ajiline Theeba Ruth
Attachments

captchaGenerator.java
4.85 KB




Prathika Kesavan has started a conversation.

14 Oct 2024, 05:36 PM
Did you know?




#didyouknow #floatingpoint

didyouknow
floatingpoint
You, Ranjith Kumar, Sandhiya and 9 more


Pavithra S
double d1 =0.1;
d1 ==> 0.1
jshell> double d2 =0.2
d2 ==> 0.2
jshell> System.out.println(" value is = "+((d1+d2) == 0.3));
 value is = false
jshell> double res = d1+d2;System.out.println(" value is = "+((d1+d2) == 0.3));
res ==> 0.30000000000000004
 value is = false

This is the output!


Ranjith Kumar
Code :
double d1 = 0.1;
double d2 = 0.2;
System.out.println(" value is = " + ((d1 + d2) == 0.3));
Explanation :
The code will likely print false. Here’s why:
Floating-Point Representation:The number 0.1 cannot be represented exactly in binary floating-point. Its closest binary representation is something like 0.1000000000000000055511151231257827021181583404541015625.The same applies to 0.2, which is represented approximately as 0.2000000000000000111022302461713793211927410125732421875.
Summation:When you add 0.1 and 0.2, the result is also an approximation, which may not equal 0.3 precisely in binary floating-point.


Bharath Kumar A
public class FloatingPointPrecision {
public static void main(String[] args) {
double d1 = 0.1;
double d2 = 0.2;
System.out.println("Value is = " + ((d1 + d2) == 0.3));
double res = d1 + d2;
System.out.println("Result of d1 + d2 = " + res);
System.out.println("Value is = " + (res == 0.3));
}
}
//output
Value is = false
Result of d1 + d2 = 0.30000000000000004
Value is = false





Prathika Kesavan has started a conversation.

17 Oct 2024, 11:27 PM
Did you know?

try catch inside for loop pros and cons.






#didyouknow

didyouknow
Ragavi L, Sandhiya, Bharathi Raja D and 11 more


Prathika Kesavan has started a conversation.

15 Oct 2024, 11:01 PM
Did you know?



#didyouknow #textblocks

didyouknow
textblocks
Ragavi L, Ranjith Kumar, Nikhil Ignatius Vidya Kanickairaj and 8 more


Pavithra S has started a conversation.

28 Aug 2024, 11:13 AM
Assignment 012 - Character check Program in java - Aug 28 - 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-012-character-check-program-in-java-aug-28-2024

#Assignments

assignments
Ranjith Kumar, Sandhiya, Dinesh Karthick Kumar and 6 more

26 more comments


Sai Trivikram
Attachments

VowelConsonantCounter.java
2.65 KB

Sandeep P
Completed

Attachments

CharacterCountChecker.java
1.06 KB

Ranjith Kumar
completed :


Attachments

CharacterValidator.java
1.5 KB




Natarajan T has started a conversation.

14 Sep 2024, 01:17 PM
Assignment 018 - Chess board - Sep 14, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-018-chess-board-14-september-2024

#chessboard #assignment #array #matrix

matrix
array
assignment
chessboard
Ranjith Kumar, Rakesh E, PraveenKumar N and 6 more


Dinesh Karthick Kumar
ChessMaker.java13.19 KB


Vijay Sai
Main.java20.22 KB


Sucharitha Kandru
Attachments

chessGame.java
9.02 KB

Shiyam Sundar
package array;
import java.util.Scanner;
import java.util.Random;
public class TwoDimensionalArray {
 
 Scanner sc = new Scanner(System.in); 
 private String tictacArr[][]= {{"   ","   ","   "},{"   ","   ","   "},{"   ","   ","   "}};
 int count = 0;
 boolean flag = true;
 public String printBoard() {
  
  String Output="\n";
  String reset = "\u001B[0m";
  String blackBg = "\u001B[40m";
     String whiteBg= "\u001B[47m";
  String whiteText = "\u001B[37m";
  String blackText = "\u001B[30m";
  for(int i=0; i<tictacArr.length;i++) {
   Output+="\t";
   for(int j=0;j<tictacArr[i].length;j++) {
    String colors ="";
    if(!((i+j)%2==0)) {
     colors+= whiteBg+blackText;
     Output+=colors+tictacArr[i][j]+reset;
     if(j==2) {
      Output+="\n";
     }
    }
    else {
     colors+= blackBg+whiteText;
     Output+=colors+tictacArr[i][j]+reset;
     
     if(j==2) {
      Output+="\n";
     }
    }
    
   }
  }
  return Output;
  
 }
 public int randomizer() {
  
  Random rn = new Random();
  return rn.nextInt(0,3);
  
 }
 public void computerPlay() {
  int compRow = randomizer();
  int compCol = randomizer();
  
  String temp1 = tictacArr[compRow][compCol];
  if( temp1 == "   ") {
   
   tictacArr[compRow][compCol]= " x ";
   count++;
   
  }
  else if((temp1 ==" o ")||(temp1 == " x ")) {
   
   while(temp1!="   ") {
    
    compRow = randomizer();
    compCol = randomizer();
    temp1 = tictacArr[compRow][compCol];
    
   }
   tictacArr[compRow][compCol]= " x ";
   count++;
   
  }
  
  
 }
 public void playerPlay() {
  
  System.out.println( printBoard());
  System.out.print("\tEnter the input (1-3)\n\tEnter the n row : ");
  int userRow = sc.nextInt()-1;
  System.out.print("\tEnter the n column : ");
  int userCol = sc.nextInt()-1;
  String temp2 = tictacArr[userRow][userCol];
  if(temp2 =="   ") {
   
   tictacArr[userRow][userCol]=" o ";
   count++;
   
  }
  else if((temp2 ==" o ") || (temp2 == " x ")) {
   
   while(temp2!="   ") {
    
    System.out.println("\n\tYou input is invalid ");
    System.out.print("\n\tEnter the n row : ");
    userRow = sc.nextInt()-1;
    System.out.print("\tEnter the n column : ");
    userCol = sc.nextInt()-1;
    temp2 =  tictacArr[userRow][userCol];
    
   }
   tictacArr[userRow][userCol]=" o ";
   count++;
   
  }
 }
 public void gamePlay() {
  computerPlay();
  if(count==9) {
   
   System.out.println( printBoard());
   System.out.println( "\tMatch is draw");
   flag = false;
   
  }
  else if(count!=9&&flag) {
    playerPlay();
  }
  
 }
 public void gameWinnerChecker() {
  
  int j = 0;
  for(int i =0;i<tictacArr.length;i++) {
   
   if(tictacArr[i][j]==tictacArr[i][j+1]&&tictacArr[i][j+1]==tictacArr[i][j+2]) {
    
    if(tictacArr[i][j]==" o ") {
     
     System.out.println("\n\tYou win the game");
     flag=false;
     break;
     
     
    }
    else if(tictacArr[i][j]==" x ") {
     
     System.out.println("\n\tComputer win the game");
     flag=false;
     break;
     
    }
   }
  }
  for(int i =0;i<tictacArr.length;i++) {
   
   if(tictacArr[j][i]==tictacArr[j+1][i]&&tictacArr[j+1][i]==tictacArr[j+2][i]) {
    
    if(tictacArr[j][i]==" o ") {
     
     System.out.println("\n\tYou win the game");
     flag=false;
     
    }
    else if(tictacArr[j][i]==" x ") {
     
     System.out.println("\n\tComputer win the game");
     flag=false;
     
    }
   }
  }
  if((tictacArr[0][0]==tictacArr[1][1]&&tictacArr[1][1]==tictacArr[2][2])||(tictacArr[0][2]==tictacArr[1][1]&&tictacArr[1][1]==tictacArr[2][0])) {
   
   if(tictacArr[1][1]==" o ") {
    
    System.out.println("\n\tYou win the game");
    flag=false;
    
   }
   else if(tictacArr[1][1]==" x ") {
    
    System.out.println("\n\tComputer win the game");
    flag=false;
    
   }
  }
  
 }
 public void playArea() {
  System.out.println("\n\tTic Tac Toe");
  System.out.println(printBoard());
  while(flag) {
   gamePlay();
   gameWinnerChecker();
   if(!flag) {
    
    System.out.println( printBoard());
    
   }
  }
  
 }
 public static void main(String[] args) {
  
  Scanner scan = new Scanner(System.in); 
  TwoDimensionalArray obj = new TwoDimensionalArray();
  obj.playArea();
  
 }
}





Ayushman Phukan
Attachments

chessBoard.java
11.05 KB

Venkata Triveni
Attachments

Chess.java
8.5 KB

Infanta Xena D L
Completed...

Attachments

ChessBoard.java
8.26 KB

Tamizharasan B
Attachments

chess.java
8.57 KB

Padma T
Chess.java17.03 KB


Janaarthanan Nandan
Attachments

Chess.java
8.17 KB

Harikrishnan V
Attachments

Chess.java
6.23 KB

Rakesh E
Attachments

Chess.java
6.95 KB

Madhu Mitha
Attachments

ChessBoard.java
4.21 KB

Gowri Shankar
Attachments

Board.java
6.62 KB

Vijay S
Attachments

ChessBoard.java
8.31 KB

Aadithya K S
Completed, Natarajan San.

Attachments

Chess.java
13.81 KB

Bharathi Raja D
Attachments

chessGame.java
5.1 KB

Dharunprasad Muthumani
Attachments

ChessBoard.java
9.57 KB

Devadharshini Somu
Attachments

chess.java
9.33 KB

Vishnu H
Attachments

Chess.java
14.41 KB

Jagan V

Attachments

ChessBoard.java
6.76 KB

Priya Sri

+5

Kishor Kumar
Attachments

ChessGame.java
9.24 KB

Dhanush S
Attachments

chess.java
7.11 KB

Ranjith Kumar
Completed :

Attachments

chessBoard.java
9.81 KB

Sandeep P
Completed

Attachments

Assignment18.zip
2.52 KB

Mukesh Ram
Attachments

Chess.java
9.33 KB

Siva Karthik
Attachments

chess.java
4.37 KB
ChessPlace.java
4.36 KB

Dwarakesh C S
ChessBoard.java10.22 KB


Vijay Raghavan




Anthony Raja. M
Attachments

ChessBoard.java
6.06 KB

Arunkumar P
Attachments

ChessGame.java
10.3 KB

Janarthanan Babu
import java.util.Scanner;
public class ChessGame {
    public static void main(String[] args) {
        player obj = new player();
        obj.userInput();
    }
}
class printBoards{
    Scanner scanner =new Scanner(System.in);
    String [][] Board= new String[8][8];
    static String color="\u001B[40m";
    public void setBoard(){
        for(int i=0;i<Board.length;i++){
            for(int j=0;j<Board.length;j++){
                Board[i][j]="  ";
            }
        }
    }
    public void printChessBoard(int a){
//        color = ;
        System.out.println();
        for(int i=0;i<8;i++){
            for(int j=0;j<8;j++){
                if(i%2==0){
                    if(j%2==0){
                        System.out.print(color+"  "+" \u001B[0m");
                    }
                    else{
                        System.out.print("\u001B[107m"+"  "+" \u001B[0m");
                    }
                }
                else{
                    if(!(j%2==0)){
                        System.out.print(color+"  "+" \u001B[0m");
                    }
                    else{
                        System.out.print("\u001B[107m"+"  "+" \u001B[0m");
                    }
                }
            }
            System.out.println();
        }
        System.out.println();
    }
    public void withCoins(){
        int k=0;
        Board[0][0] = " \u2656";
        Board[0][1] = " \u2658";
        Board[0][2] = " \u2657";
        Board[0][3] = " \u2654";
        Board[0][4] = " \u2655";
        Board[0][5] = " \u2657";
        Board[0][6] = " \u2658";
        Board[0][7] = " \u2656";
        Board[7][0] = " \u265C";
        Board[7][1] = " \u265E";
        Board[7][2] = " \u265D";
        Board[7][3] = " \u265B";
        Board[7][4] = " \u265A";
        Board[7][5] = " \u265D";
        Board[7][6] = " \u265E";
        Board[7][7] = " \u265C";
        for(int i=0;i<8;i++){
            for(int j=0;j<8;j++){
                if(i==1){
                    Board[i][j]=" \u2659";
                }
                else if(i==6){
                    Board[i][j]=" \u265F";
                }
                else if(i!=1 && i!=6 && i!=0 && i!=7){
                    Board[i][j]="  ";
                }
            }
        }
        for(int i=0;i<8;i++){
            for(int j=0;j<8;j++){
                if(k%2==0){
                    System.out.print(color+Board[i][j]+" \u001B[0m");
                    k++;
                }
                else{
                    System.out.print("\u001B[107m"+Board[i][j]+" \u001B[0m");
                    k++;
                }
            }
            k++;
            System.out.println();
        }
    }
    public void Coins(){
        String coin="";
        System.out.println("Enter 1 to ♖ (Rook)");
        System.out.println("Enter 2 to ♘ (Knight)");
        System.out.println("Enter 3 to ♗ (Bishop)");
        System.out.println("Enter 4 to ♕ (Queen)");
        System.out.println("Enter 5 to ♔ (King)");
        System.out.print("Enter your choice: ");
        int choice=scanner .nextInt();
        if(choice==1){
            coin=" \u265C";
        }
        else if(choice==2){
            coin=" \u265E";
        }
        else if(choice==3){
            coin=" \u265D";
        }
        else if(choice==4){
            coin=" \u265B";
        }
        else if(choice==5){
            coin=" \u265A";
        }
        System.out.print("Enter x value:");
        int x=scanner.nextInt();
        System.out.print("Enter y value:");
        int y=scanner.nextInt();
        for(int i=0;i<8;i++){
            for(int j=0;j<8;j++){
                Board[i][j]="  ";
            }
        }
        System.out.println("-------------------------");
        int k=0;
        Board[x][y]=coin;
        for(int i=0;i<8;i++){
            for(int j=0;j<8;j++){
                if((coin==" \u265C")&&(x==j || y==i)){
                    Board[i][j]=" x";
                }
                else if((coin==" \u265E")&&(((i==x+2&&j==y+1)||(i==x+2&&j==y-1))||((i==x-2&&j==y+1)||(i==x-2&&j==y-1))
                        ||((j==x+2&&i==y+1)||(j==x+2&&i==y-1))||((j==x-2&&i==y+1)||(j==x-2&&i==y-1)))){
                    Board[i][j]=" x";
                }
                else if((coin==" \u265D")&&(x+y==j+i||x-y==j-i)){
                    Board[i][j]=" x";
                }
                else if((coin==" \u265B")&&((x==j || y==i)||(x+y==j+i||x-y==j-i))){
                    Board[i][j]=" x";
                }
                else if((coin==" \u265A")&&((x==i+1|| x==i-1|| x==i)&&(y==j+1||y==j-1||y==j))){
                    Board[i][j]=" x";
                }
                if(x==j&&y==i){
                    System.out.print(coin+" ");
                    k++;
                }
                else if(k%2==0){
                    System.out.print(color+Board[i][j]+" \u001B[0m");
                    k++;
                }
                else{
                    System.out.print("\u001B[107m"+Board[i][j]+" \u001B[0m");
                    k++;
                }
            }
            k++;
            System.out.println();
        }
        System.out.println("-------------------------");
    }
}
class player{
    Scanner scanner =new Scanner(System.in);
    printBoards obj=new printBoards();
    public void userInput(){
        boolean flag=true;
        while (flag) {
            System.out.println("1 to see chess board without coins");
            System.out.println("2 to see chess board with coins");
            System.out.println("3 to see the moves of the coin");
            System.out.println("4 to Exit");
            System.out.print("Enter your choice:");
            int choice=scanner .nextInt();
            if(choice==1){
                obj.printChessBoard(8);
            }
            else if(choice==2){
                obj.withCoins();
            }
            else if(choice==3){
                obj.Coins();
            }
            else{
                flag=false;
            }
        }
    }
}
See more


Srinidhi A
ChessGame.java9.33 KB


Ragavi L
Attachments

ChessBoard.java
9.91 KB

Shriharan B
ChessGame.java7.08 KB


Mohamed Haaris
import java.util.*;
public class Chess {
    public static void main(String[] args) {
        Chess obj = new Chess();
        obj.coinPlace();
        obj.chessBoard();
        obj.placeCoin();
    }
    private static final String WHITE_PAWN = "\u2659";
    private static final String WHITE_ROOK = "\u2656";
    private static final String WHITE_KNIGHT = "\u2658";
    private static final String WHITE_BISHOP = "\u2657";
    private static final String WHITE_QUEEN = "\u2655";
    private static final String WHITE_KING = "\u2654";
    private static final String BLACK_PAWN = "\u265F";
    private static final String BLACK_ROOK = "\u265C";
    private static final String BLACK_KNIGHT = "\u265E";
    private static final String BLACK_BISHOP = "\u265D";
    private static final String BLACK_QUEEN = "\u265B";
    private static final String BLACK_KING = "\u265A";
    private String[][] board = new String[8][8];
    public Chess() {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                board[i][j] = "   ";
            }
        }
    }
    public void chessBoard() {
        System.out.println("                  " + "BLACK" + "       ");
        System.out.println("   " + " a " + " " + " " + " b " + " " + " c " + " " + " " + " d " + " " + " " + " e "
                + " " + " " + " f " + " " + " " + " g " + " " + " " + " h " + " ");
        for (int i = 0; i < board.length; i++) {
            System.out.print((8 - i) + " ");
            for (int j = 0; j < board[i].length; j++) {
                if ((i + j) % 2 == 0) {
                    System.out.print(AnsiColors.BACKGROUND_BLUE + " " + board[i][j] + " " + AnsiColors.RESET);
                } else {
                    System.out.print(AnsiColors.BACKGROUND_CYAN + " " + board[i][j] + " " + AnsiColors.RESET);
                }
            }
            System.out.println();
        }
        System.out.println("                  " + "WHITE" + "       ");
    }
    public void coinPlace() {
        board[0] = new String[] { " " + BLACK_ROOK + " ", " " + BLACK_KNIGHT + " ", " " + BLACK_BISHOP + " ",
                " " + BLACK_QUEEN + " ", " " + BLACK_KING + " ", " " + BLACK_BISHOP + " ", " " + BLACK_KNIGHT + " ",
                " " + BLACK_ROOK + " " };
        board[1] = new String[] { " " + BLACK_PAWN + " ", " " + BLACK_PAWN + " ", " " + BLACK_PAWN + " ",
                " " + BLACK_PAWN + " ", " " + BLACK_PAWN + " ", " " + BLACK_PAWN + " ", " " + BLACK_PAWN + " ",
                " " + BLACK_PAWN + " " };
        board[6] = new String[] { " " + WHITE_PAWN + " ", " " + WHITE_PAWN + " ", " " + WHITE_PAWN + " ",
                " " + WHITE_PAWN + " ", " " + WHITE_PAWN + " ", " " + WHITE_PAWN + " ", " " + WHITE_PAWN + " ",
                " " + WHITE_PAWN + " " };
        board[7] = new String[] { " " + WHITE_ROOK + " ", " " + WHITE_KNIGHT + " ", " " + WHITE_BISHOP + " ",
                " " + WHITE_QUEEN + " ", " " + WHITE_KING + " ", " " + WHITE_BISHOP + " ", " " + WHITE_KNIGHT + " ",
                " " + WHITE_ROOK + " " };
    }
    public void placeCoin() {
        Scanner scan = new Scanner(System.in);
        System.out.println("Enter the piece type (e.g., WHITE_QUEEN, BLACK_KING): ");
        String pieceType = scan.nextLine().toUpperCase();
        String piece = null;
        if (pieceType.equals("WHITE_PAWN")) {
            piece = WHITE_PAWN;
        } else if (pieceType.equals("WHITE_ROOK")) {
            piece = WHITE_ROOK;
        } else if (pieceType.equals("WHITE_KNIGHT")) {
            piece = WHITE_KNIGHT;
        } else if (pieceType.equals("WHITE_BISHOP")) {
            piece = WHITE_BISHOP;
        } else if (pieceType.equals("WHITE_QUEEN")) {
            piece = WHITE_QUEEN;
        } else if (pieceType.equals("WHITE_KING")) {
            piece = WHITE_KING;
        } else if (pieceType.equals("BLACK_PAWN")) {
            piece = BLACK_PAWN;
        } else if (pieceType.equals("BLACK_ROOK")) {
            piece = BLACK_ROOK;
        } else if (pieceType.equals("BLACK_KNIGHT")) {
            piece = BLACK_KNIGHT;
        } else if (pieceType.equals("BLACK_BISHOP")) {
            piece = BLACK_BISHOP;
        } else if (pieceType.equals("BLACK_QUEEN")) {
            piece = BLACK_QUEEN;
        } else if (pieceType.equals("BLACK_KING")) {
            piece = BLACK_KING;
        } else {
            System.out.println("Invalid piece type.");
            return;
        }
        System.out.println("Enter the position (e.g., e4): ");
        String position = scan.nextLine().toLowerCase();
        if (position.length() == 2) {
            char columnChar = position.charAt(0);
            char rowChar = position.charAt(1);
            int column = columnChar - 'a';
            int row = 8 - (rowChar - '0');
            if (row >= 0 && row < 8 && column >= 0 && column < 8) {
                board[row][column] = " " + piece + " ";
                chessBoard();
            } else {
                System.out.println("Invalid position. Please enter a valid position (e.g., e4).");
            }
        } else {
            System.out.println("Invalid input. Please enter the position in the format 'e4'.");
        }
    }
}
See more


Suriya Narayanan
Attachments

ConsoleChessBoard.java
8.46 KB

Karthikeyan L
Attachments

ChessCoins.java
819 Bytes
Main.java
3.29 KB
ChessBoardViewer.java
3.55 KB
ChessBoardMaker.java
6.32 KB

Diwahar M
Attachments

ChessGame.java
8.73 KB

PraveenKumar N
Completed.

Attachments

ChessBoard.java
16.28 KB

Dhanush S
Attachments

chess.java
8.15 KB

Ramana M
Attachments

chess.java
8.96 KB

Sai Saran
ChessGame.java7.48 KB


Nikhil Ignatius Vidya Kanickairaj
Attachments

ChessCreator.java
8.95 KB

Abinesh Jv
Attachments

ChessBoard.java
10.68 KB

Tamilselvan Arumugam
Attachments

ChessMaker.java
7.31 KB




Prathika Kesavan has started a conversation.

11 Oct 2024, 03:48 PM
Did you know ?

https://connect.zoho.com/portal/zohoschools-2026/manual/did-you-know/article/use-lombok-to-reduce-boilerplate-code

#didyouknow

didyouknow
Ranjith Kumar, Rakesh E, Sandhiya and 4 more


Pavithra S has started a conversation.

05 Jul 2024, 06:53 PM
Assignement 001 - Basic Java Programs - July 5 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-001-basic-java-programs-variables-and-data-types-july-05-2024

Comment your Answers (Java Programs) below...

#assignments

assignments
Jeshwanth S, Ranjith Kumar, Infanta Xena D L and 9 more

55 more comments


Vijayaraghavan V




Dheena Rajasekaran




Valliyappa Anand
Attachments

Add.java
348 Bytes
Agee.java
153 Bytes
Area.java
257 Bytes




Natarajan T has started a conversation.

27 Sep 2024, 02:14 PM
Quiz 11 - Inheritance in java - Sep 27 , 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/quiz-1/article/quiz-11-inheritance-in-java-sep-27-2024

Ranjith Kumar, Sandhiya, Bharathi Raja D and 6 more

54 more comments


Purnima V
1.b) Dog’s speak() method
2.c) Yes, because it's protected and ElectricCar is asubclass
3.c) GrandParent
4.b) Bike is moving
5.b) No, because private members are not inherited
6.a) Calls the constructor of the parent class


Narmadha S
b) Dog’s speak() method
c) Yes, because it's protected and ElectricCar is a subclass
c) GrandParent
b) Bike is moving
b) No, because private members are not inherited
a) Calls the constructor of the parent class


Anshul Chaudhary
1.a) Dog's speak() method
2. c) Yes, because it's protected
3. c)Grandparent
4. b) Bike is Moving
5.d) No, unless it changes the access modifier to protected
6.a) Calls the constructor of the parent class





Pavithra S has started a conversation.

01 Aug 2024, 06:27 PM
Assignment 007 - Steganography, Vowels and Consonants & Case transformer

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-007-stenography-vowels-and-consonants

#assignment

assignment
Sandhiya, Bharathi Raja D, Purnima V and 3 more

55 more comments


Priya Sri
















Sandeep P
Completed

Attachments

Assignment7.zip
4.39 KB

Sivashankaran S
Attachments

CeasarCipher.java
3.78 KB
TextTransformer.java
6.09 KB
VowelConsonantCounter.java
6.8 KB




Prathika Kesavan has started a conversation.

13 Aug 2024, 12:17 PM
Assignment - 009 - Guessing Game ( numbers, words, characters or anything)

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-009-guessing-game-numbers-words-characters-or-anything

#assignments

assignments
Ranjith Kumar, Sandhiya, Vijay Sai and 3 more

62 more comments


Abinesh Jv
Attachments

GuessTheNumber.java
1.48 KB

Sandeep P
Completed

Attachments

Assignment9.zip
1.51 KB

Ranjith Kumar
completed :


Attachments

MathsGame.java
1.96 KB




Janaarthanan Nandan has started a conversation.

29 Sep 2024, 04:14 PM
Simple Notebooks Management System, in Java using basic Java Concepts (and some File Handling and Exception Handling concepts).

Attachments

NoteBooks
Ranjith Kumar, Sandhiya, Vijay Sai and 7 more


Natarajan T has started a conversation.

27 Sep 2024, 06:54 PM
Fireside chats - Exception handling - Sep 27 , 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/fireside-chats/article/exception-handling-sep-27-2024

#firesidechat #exceptionhandling

exceptionhandling
firesidechat
Ranjith Kumar, Sandhiya, Suriya Narayanan and 6 more


Pavithra S has started a conversation.

27 Sep 2024, 06:52 PM
025 - Exception Handling in Java - Sep 27 , 2024.

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/20-exception-handling-in-java-sep-27-2024

#classwork

classwork
Ranjith Kumar, Sandhiya, Suriya Narayanan and 5 more


Pavithra S has started a conversation.

27 Sep 2024, 06:51 PM
024 - Inheritance Example code (Zoho Product) - Sep 26, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/024-inheritance-example-code-zoho-product-sep-26-2024

#classwork

classwork
Ranjith Kumar, Rakesh E, Sandhiya and 5 more


Pavithra S has started a conversation.

27 Sep 2024, 06:49 PM
023 - With and without Inheritance Example code - Sep 26, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/021-with-and-without-inheritance-example-code-sep-26-2024

#classwork

classwork
Ranjith Kumar, Sandhiya, Vijay Sai and 4 more


Pavithra S has started a conversation.

27 Sep 2024, 06:48 PM
022 - With and Without Inheritance in java - Sep 26, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/020-with-and-without-inheritance-in-java-paret-sep-26-2024

#classwork

classwork
Ranjith Kumar, Sandhiya, Vijay Sai and 3 more


Natarajan T has started a conversation.

27 Sep 2024, 05:43 PM
Class works 19 ( part 3 ) -Types of Inheritance - Sep 26, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/classworks-19-types-of-inheritance-sep-23-2024

#inheritance

inheritance
Ranjith Kumar, Rakesh E, Sandhiya and 3 more


Natarajan T has started a conversation.

23 Sep 2024, 08:15 PM
Fireside Chat - Why doesn't java support multiple inheritance - 23 Sep, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/fireside-chats/article/fireside-chat-multiple-inheritance-23-sep-2024

#firesidechat #inheritance

Sandhiya, Bharathi Raja D, Shasanth Velluru and 10 more


Natarajan T has started a conversation.

23 Sep 2024, 07:14 PM
Fireside Chat - Cyclic error - 23 Sep, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/fireside-chats/article/fireside-chat-cyclic-inheritance-sep-23-2024

#firesidechat #inheritance

inheritance
firesidechat
Sandhiya, Bharathi Raja D, Shasanth Velluru and 10 more


Pavithra S has shared a link.

18 Jul 2024, 10:26 AM
Assignment 006 - Conditional statements in Java - July 18, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-005-conditional-statements-july-18-2024

In 3rd Question password is String
public boolean isCorrectPassword(String password)

#Assignment #practice

practice
assignment
Conditional Statements in Programming | Definition, Types, Best Practices - GeeksforGeeks
A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview
www.geeksforgeeks.org
Jeshwanth S, Ranjith Kumar, Infanta Xena D L and 8 more

32 more comments


Vijayaraghavan V










Dhanya Sri M

Sandeep P
Completed

Attachments

Assignment6.zip
1.38 KB




Prathika Kesavan has started a conversation.

19 Aug 2024, 11:35 AM
Assignment 011 - Array Manipulator - Aug 19, 2024


https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-011-array-aug-14-2024


#assignments #array

assignments
array
Ranjith Kumar, Tamizharasan B, Sandhiya and 7 more

58 more comments


Sivashankaran S
Attachments

ArrayManipulator.java
26.83 KB

Sahana Murugaraj


Sandeep P
Completed

Attachments

ArrayManipulator2.java
2.07 KB




Pavithra S has started a conversation.

21 Aug 2024, 09:41 AM
Assignment - 011 - Array Manipulator (Part 3) - Aug 21, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-011-array-manipulator-part-3-aug-21-2024

#assignements #array

array
assignements
Sandhiya, Bharathi Raja D, Sivashankaran S and 3 more

49 more comments


Anshul Chaudhary
Attachments

ArrayManipulator2.java
2.56 KB

Vijayaraghavan V
package Assignments;
public class ArrayManipulator_3 {
    int[] sourceArr = {1,2,3,4,5,6,8};
    public static void main(String[] args) {
        ArrayManipulator_3 obj = new ArrayManipulator_3();
        System.out.println("Even : "+obj.evenCount());
        System.out.println("Odd : "+obj.oddCount());
        System.out.println("Second Max : "+obj.secondMax());
        System.out.println("Second Min : "+obj.secondMin());
//        System.out.println("Pair Sum : "+obj.findPairSum(5));
        obj.findPairSum(5);
    }
    public int evenCount(){
        int count=0;
        for(int i=0;i<sourceArr.length;i++){
            if(sourceArr[i]%2==0){
                count++;
            }
        }
        return count;
    }
    public int oddCount(){
        int count=0;
        for(int i=0;i<sourceArr.length;i++){
            if(sourceArr[i]%2==1){
                count++;
            }
        }
        return count;
    }
    public int secondMax(){
        int temp;
        int []out = new int[sourceArr.length];
        for (int m=0;m< out.length;m++){
            out[m]=sourceArr[m];
        }
        for(int i=0;i<sourceArr.length;i++){
            for(int j=i+1;j<sourceArr.length;j++){
                if(out[i]<out[j]){
                    temp = out[i];
                    out[i]=out[j];
                    out[j]=temp;
                }
            }
        }return out[1];
    }
    public int secondMin(){
        int temp;
        int []out = new int[sourceArr.length];
        for (int m=0;m< out.length;m++){
            out[m]=sourceArr[m];
        }
        for(int i=0;i<sourceArr.length;i++){
            for(int j=i+1;j<sourceArr.length;j++){
                if(out[i]>out[j]){
                    temp = out[i];
                    out[i]=out[j];
                    out[j]=temp;
                }
            }
        }return out[1];
    }
    public void  findPairSum(int element){
        for(int i=0;i<sourceArr.length;i++){
            for(int j=0;j< sourceArr.length;j++){
                if(sourceArr[i]+sourceArr[j]==element){
                    System.out.println(sourceArr[i]+" , "+ sourceArr[j]);
                }
            }
        }
    }
}
See more


Sandeep P
Completed

Attachments

ArrayOperations3.java
2.93 KB




Pavithra S has started a conversation.

28 Aug 2024, 11:51 AM
Assignment 013 - Letter Frequency Counter in java - Aug 28 - 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-013-letter-counter-in-java-aug-28-2024

#Assignments

assignments
Ranjith Kumar, Sandhiya, Bharathi Raja D and 5 more

56 more comments


Abinesh Jv
Attachments

LetterCounter.java
1.49 KB

Mukesh Ram
Attachments

LetterFrequencyCounter.java
2.24 KB

Sandeep P
Completed

Attachments

Assignment13.zip
1.54 KB




Pavithra S has started a conversation.

19 Aug 2024, 11:48 AM
Assignment 011 - Array Manipulator (Part 2) - Aug 19, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-011-array-manipulator-part-2-aug-19-2024

#assignments #array

assignments
array
Ranjith Kumar, Sandhiya, Bharathi Raja D and 4 more

52 more comments


Vijayaraghavan V
public class ArrayManipulator{
    int[] sourceArr ={10,45,68,94,36,45};
    public static void main (String args[]){
       ArrayManipulator obj = new ArrayManipulator();
       int[] duplicate= obj.copyArr();
       System.out.print("Duplicate Array : ");
       for(int i=0;i<duplicate.length;i++){
          System.out.print(duplicate[i] + " ");
       }
       System.out.println();
       obj.findIndex(68);
       obj.findElement(45);
       obj.removeElement(45);
       System.out.println();
       System.out.println("The Number is occured "+obj.countOfOccurences(45)+" times");    }
    public int[] copyArr(){
       int[] duplicateArr = new int[sourceArr.length];
       for(int i=0 ; i<sourceArr.length;i++){
          duplicateArr[i] = sourceArr[i];       }
       return duplicateArr;
    }
    public void findIndex(int element){
       boolean found = false;
       for(int i=0;i<sourceArr.length;i++){
          if(sourceArr[i] == element){
             System.out.println("Index of "+element +" is "+i);
             found = true;
             break;
          }
       }
       if(!found){
          System.out.println("Element " + element + " not found in the array.");
       }
    }    public void findElement(int element){
       boolean found = false;
       for(int i=0;i<sourceArr.length;i++){
          if(sourceArr[i] == element){
             System.out.println(element + " is present in the array");
             found = true;
             break;
          }
       }
       if(!found){
          System.out.println(element + " is not present in the array");
       }
    }
    public int[] removeElement(int element) {
       int count = 0;
       for (int i = 0; i < sourceArr.length; i++) {
          if (sourceArr[i] == element) {
             count++;
          }
       }
       if (count == 0) {
          System.out.println("Element " + element + " not found in the array.");
          return sourceArr;
       }
       int[] newArr = new int[sourceArr.length - count];
       int j = 0;
       for (int i = 0; i < sourceArr.length; i++) {
          if (sourceArr[i] != element) {
             newArr[j++] = sourceArr[i];
          }
       }
       System.out.print("New Array : ");
       for(int i=0;i<sourceArr.length-count;i++){
          System.out.print(newArr[i] + " ");
       }
       return newArr;
    }
    public int countOfOccurences(int element){
       int count=0;       for(int i=0;i<sourceArr.length;i++){
          if(sourceArr[i]==element){
             count++;
          }
       }return count;
    }
}
See more


Abinesh Jv
Attachments

ArrayManipulator.java
3.68 KB

Sandeep P
Completed

Attachments

ArrayManipulator.java
3.61 KB




Pavithra S has started a conversation.

23 Aug 2024, 12:09 PM
Assignment 012 - Nim game using Constructor and array - Aug 23, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-012-nim-game-using-constructor-array

#assignments

assignments
Sandhiya, Bharathi Raja D, Vijay Sai and 4 more

47 more comments


Harikrishnan V
Attachments

NimGame.java
1.61 KB

Abinesh Jv
Attachments

NimGame.java
1.15 KB

Sandeep P
Completed

Attachments

Assignment12.zip
2.6 KB




Pavithra S has started a conversation.

02 Sep 2024, 11:48 AM
Assignment 015 - Date Validation in java - Sep 2, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-015-date-validation-in-java-sep-2-2024

#Assignments

assignments
Ranjith Kumar, Sandhiya, Vijay Sai and 4 more

52 more comments


Vijayaraghavan V
package Assignments.Assignment_15;
import java.util.Scanner;
public class DateVerifier {
    String dayPart;
    String monthSegment;
    String yearSegment;
    public DateVerifier(String inputDate) {
        if (inputDate.contains("/")) {
            try {
                String[] temp = inputDate.split("/");
                this.yearSegment = temp[0];
                this.monthSegment = temp[1];
                this.dayPart = temp[2];
                checkValidity();
            } catch (Exception e) {
                System.out.println("Date components should be integers.");
            }
        } else if (inputDate.contains("-")) {
            try {
                String[] temp = inputDate.split("-");
                this.yearSegment = temp[0];
                this.monthSegment = temp[1];
                this.dayPart = temp[2];
                checkValidity();
            } catch (Exception e) {
                System.out.println("Date components should be integers.");
            }
        } else if (inputDate.contains("_")) {
            try {
                String[] temp = inputDate.split("_");
                this.yearSegment = temp[0];
                this.monthSegment = temp[1];
                this.dayPart = temp[2];
                checkValidity();
            } catch (Exception e) {
                System.out.println("Date components should be integers.");
            }
        } else {
            System.out.println("Invalid separator.");
        }
    }
    public boolean validateYear() {
        boolean isValid = false;
        int year = Integer.parseInt(this.yearSegment);
        if (year > 0) {
            isValid = true;
        }
        return isValid;
    }
    public boolean validateMonth() {
        boolean isValid = false;
        int month = Integer.parseInt(this.monthSegment);
        if (month >= 1 && month <= 12) {
            isValid = true;
        }
        return isValid;
    }
    public boolean validateDay() {
        boolean isValid = false;
        int year = Integer.parseInt(this.yearSegment);
        int month = Integer.parseInt(this.monthSegment);
        int day = Integer.parseInt(this.dayPart);
        if (day <= 31 && day > 0) {
            if (year % 4 == 0 && month == 2) {
                if (day <= 29) {
                    isValid = true;
                } else {
                    System.out.println("In leap year " + year + ", February has only 29 days.");
                    isValid = false;
                }
            } else if (year % 4 != 0 && month == 2) {
                if (day <= 28) {
                    isValid = true;
                } else {
                    System.out.println("In year " + year + ", February has only 28 days.");
                    isValid = false;
                }
            } else if (month == 4 || month == 6 || month == 9 || month == 11) {
                if (day <= 30) {
                    isValid = true;
                } else {
                    System.out.println("Month " + month + " has only 30 days.");
                    isValid = false;
                }
            } else {
                isValid = true;
            }
        } else {
            System.out.println("Day cannot exceed 31.");
            isValid = false;
        }
        return isValid;
    }
    public void checkValidity() {
        if (this.validateYear()) {
            if (this.validateMonth()) {
                if (this.validateDay()) {
                    System.out.println("Date is valid.");
                } else {
                    System.out.println("Invalid day.");
                }
            } else {
                System.out.println("Month must be between 1 and 12.");
            }
        } else {
            System.out.println("Year cannot be negative.");
        }
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter Date (yyyy-mm-dd): ");
        DateVerifier dateObj = new DateVerifier(sc.next());
    }
}
See more


Abinesh Jv
Attachments

Calendar.java
892 Bytes

Sandeep P
Completed

Attachments

Assignment15.zip
1.83 KB




Prathika Kesavan has started a conversation.

16 Jul 2024, 11:31 AM
Assignment 004 - String methods. - 16 July 2024:

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-004-string-methods



#assignments

assignments
Venkata Triveni, Ranjith Kumar, Infanta Xena D L and 9 more

36 more comments


Dhanya Sri M


Dheena Rajasekaran




Sandeep P
Completed

Attachments

Assignment4.zip
906 Bytes




Pavithra S has started a conversation.

17 Jul 2024, 04:25 PM
Assignment 005 - Methods & object creation in java - July 17, 2024

Create separate methods for each code and call the methods using object creation in the main method.

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-005-methods-object-creation-in-java-july-17-2024

#assignments

assignments
Sandhiya, Shriharan B, Bharathi Raja D and 12 more

40 more comments


Dhanya Sri M

Dheena Rajasekaran






Sandeep P
Completed

Attachments

Assignment5.zip
3.43 KB




Natarajan T has started a conversation.

19 Sep 2024, 06:18 PM
class works - 019 - Inheritance in java - 19 Sep, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/019-inheritance-in-java-19-sep-2024

#oop #inheritance #classworks

classworks
inheritance
oop
Ranjith Kumar, Sandhiya, Bharathi Raja D and 5 more

32 more comments


Purnima V
Attachments

AnimalFamily.java
869 Bytes

Devadharshini Somu
Attachments

Main.java
739 Bytes

Sandhiya
Attachments

KoreanDrama.java
1.78 KB




Prathika Kesavan has started a conversation.

29 Jul 2024, 11:39 AM
Classwork - Practice - 29 July 2024 :

https://connect.zoho.com/portal/zohoschools-2026/manual/classwork-practice/article/classwork-practice-29-july-2024

#classwork #practice

classwork
practice
Ranjith Kumar, Infanta Xena D L, Sandhiya and 5 more

18 more comments


Priya Sri




Diwahar M
Attachments

StringInputVerifier.java
1.44 KB

Maha Krishnan

Attachments

StringInputVerifier.java
1.83 KB




Natarajan T has started a conversation.

17 Sep 2024, 06:47 PM
Class works - 018 - Moves of the king - 17 Sep, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/018-moves-of-the-king-17-sep-2024

#classworks #chess

classworks
chess
You, Ranjith Kumar, Sandhiya and 4 more


Abhineet Hariharan
public void tutorialForKing(int y, int x){
        x--;
        y--;
        int xm = x - 1;
        int ym = y - 1;
        int xp = x + 1;
        int yp = y + 1;
        if (xm == -1){
            xm = 0;
        }
        else if(xp > 7){
            xp = 7;
        }
        if (ym < 0){
            ym = 0;
        }
        else if (yp > 7){
            yp = 7;
        }
        piecesArrangement[ym][x] = "X";
        piecesArrangement[y][xm] = "X";
        piecesArrangement[ym][xm] = "X";
        piecesArrangement[yp][x] = "X";
        piecesArrangement[y][xp] = "X";
        piecesArrangement[yp][xp] = "X";
        piecesArrangement[ym][xp] = "X";
        piecesArrangement[yp][xm] = "X";
        piecesArrangement[y][x] = "♚";
        displayBoard();
}
See more





Pavithra S has started a conversation.

17 Sep 2024, 06:27 PM
Work flow - Chess board King move (2d array example) - Sep 17, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/workflow/article/work-flow-chess-board-king-move-2d-array-example-sep-17-2024

#workflow

workflow
Ranjith Kumar, Sandhiya, Vishnu H and 2 more


Pavithra S has started a conversation.

17 Sep 2024, 06:21 PM
017 - 2D Array Examples - Sep 17, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/017-2d-array-examples-sep-17-2024

#classwork

classwork
Ranjith Kumar, Sandhiya, Vishnu H and 3 more


Pavithra S has started a conversation.

23 Aug 2024, 11:38 AM
Quiz - 8 - Constructor in java - Aug 23, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/quiz-1/article/quiz-7-constructor-in-java-aug-23-2024

#quiz

quiz
Ranjith Kumar, Sandhiya, Vijay Sai and 5 more

32 more comments


Vijayaraghavan V
1. Book constructor called
2. Toyota
3. Width: 10,Height: 20
Width: 30,Height: 40
4. x: 0, y: 0
5. Constructor is undefined
6. Student Name: Alice
7. 40
8. Calling default constructor
Calling parameterized constructor
9. Constructor is undefined
10. Duplicate method is available
11. Nothing is printed
12. Test is undefined
13. Type mismatch: cannot convert from double to String
Type mismatch: cannot convert from String to double


Dhanya Sri M


Bharath Kumar A
Attachments

Quiz-8.pdf
476.99 KB




Pavithra S has started a conversation.

06 Sep 2024, 03:08 PM
Quiz 9 - static in java - Sep 6, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/quiz-1/article/quiz-9-static-in-java-sep-6-2024

#quiz

quiz
Ranjith Kumar, Sandhiya, Rakesh E and 6 more

42 more comments


Diwahar M
1 .Static block executed. value = 42.
2. non static method executed. "this is a display method".
3.constructor called 3 times .count =3.
4.10.
5.name is not initialize,
it comes null pointer exception.
6. error- a should declared with static,otherwise it comes error.
7.final value = 25.
8.error- cannot print because cannot referenced static method.
9. error- cannot print because cannot referenced static variable.


Dhanya Sri M
Attachments

quiz9.pdf
379.22 KB

Bharath Kumar A
Attachments

Quiz-9.pdf
304.18 KB




Prathika Kesavan has started a conversation.

02 Sep 2024, 11:25 AM
Define multiple possible ways of defining constructors and toString() for these classes.

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/define-constructor-and-tostring-method-in-java


#assignments #constructor #toString()

tostring
constructor
assignments
Ranjith Kumar, Sandhiya, Bharathi Raja D and 5 more

42 more comments


Ayushman Phukan
Attachments

Library.java
762 Bytes
StudentFIle.java
531 Bytes

Maha Krishnan
Attachments

Library.java
2.52 KB
StudentInfo.java
758 Bytes

Anshul Chaudhary
Attachments

Student.java
606 Bytes
Library.java
801 Bytes




Natarajan T has started a conversation.

09 Sep 2024, 12:27 PM
Quiz 10 - static in java - Sep 9 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/quiz-1/article/quiz-10-static-sep-9-2024

#quiz #static

static
quiz
Ranjith Kumar, Venkata Triveni, Tamizharasan B and 6 more

26 more comments


Dharunprasad Muthumani
+1

Madhu Mitha



+1

Bharath Kumar A

Attachments

Screenshot from 2024-09-13 14-20-22.pdf
233.38 KB




Prathika Kesavan has started a conversation.

12 Aug 2024, 12:59 PM
Classwork practice 008 - List Randomizer - 12 Aug 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classwork-practice/article/list-randomizer

#classworkpractice

classworkpractice
Sandhiya, Bharathi Raja D, Purnima V and 4 more

44 more comments


Mani Vishnu
Attachments

ListRandomizer.java
784 Bytes

Purnima V
Attachments

ListRandomizer.java
1.13 KB

Mohamed Haaris
import java.util.*;
public class ListRandomizer {
    Random random = new Random();
    int[] data;
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        System.out.println("Enter the size of the Array");
        int length = scan.nextInt();
        int[] inputArray = new int[length];
        System.out.println("Enter the Elements of the array");
        for (int i = 0; i < length; i++) {
            inputArray[i] = scan.nextInt();
        }
        System.out.println("Entered Array: " + Arrays.toString(inputArray));
        ListRandomizer obj = new ListRandomizer();
        obj.setData(inputArray);
        obj.randomizer();
    }
    public void setData(int[] inputArray) {
        data = inputArray;
    }
    public void randomizer() {
        boolean[] flag = new boolean[data.length];
        int count = 0;
        int[] randomizedArray = new int[data.length];
        while (count != data.length) {
            int num = random.nextInt(data.length);
            if (flag[num]) {
                continue;
            } else {
                randomizedArray[count] = data[num];
                flag[num] = true;
                count++;
            }
        }
        System.out.println("Randomized Array: " + Arrays.toString(randomizedArray));
    }
    public void setRandom(Random random) {
        this.random = random;
    }
}
See more





Pavithra S has started a conversation.

21 Aug 2024, 09:47 AM
Array Creator in java - Aug 21, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classwork-practice/article/array-creator-in-java-aug-21-2024

#classworkPractice #array

array
classworkpractice
Ranjith Kumar, Sandhiya, Bharathi Raja D and 2 more

21 more comments


Ayushman Phukan
Attachments

ArrayCreator.java
1.68 KB

Priya Sri






Purnima V
Attachments

ArrayCreator.java
1.25 KB




Natarajan T has started a conversation.

10 Sep 2024, 05:51 PM
Show Summary
Java Programming: Summary the static keyword - September 9,2024


Hello students! Today, we learned about the static keyword and static methods. Here’s the summary of our class. Hope you enjoyed it!

Summary from @Bhargaveswaran B
Today's Key Moments: September 9, 2024

What is a Static Method?
Definition: A static method belongs to the class itself rather than any instance of the class.
Invocation: It can be called directly without creating an object of the class.
Accessibility: It is accessible by all users of the class.
Uses: Commonly used for utility functions, helper methods, and implementing design patterns like Singleton (e.g., password checkers).
Why Can't Non-Static Methods Be Called Within Static Methods?
Reason: Non-static methods require an instance (object) of the class to operate, as they work with instance-specific data. Static methods do not have an implicit instance and thus cannot directly call non-static methods.
How Is Data Stored in a Static Method?
Memory: Data related to static methods is stored in the method area of the JVM memory, which is part of the heap memory. Local variables within static methods are stored in the stack memory.
Example: When a static method declares a variable, the variable is stored in the method area, while any local variables are stored on the stack.
#static

static
Ranjith Kumar, Sandhiya, Bharathi Raja D and 6 more


Pavithra S has started a conversation.

10 Sep 2024, 04:21 PM
016 - static use case in java - Sep 10, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/016-static-examples-in-java-sep-10-2024-10-9-2024

#classwork

classwork
Ranjith Kumar, Sandhiya, Bharathi Raja D and 3 more


Pavithra S has started a conversation.

09 Sep 2024, 05:23 PM
015 - Static methods in java - Sep 9, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/015-static-methods-in-java-sep-9-2024

#classwork

classwork
Ranjith Kumar, Tamizharasan B, Sandhiya and 4 more


Pavithra S has started a conversation.

05 Sep 2024, 11:55 AM
014 - static in java - sep 5, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/014-static-in-java-sep-5-2024

#classworks

classworks
Ranjith Kumar, Sandhiya, Bharathi Raja D and 4 more


Pavithra S has shared a link.

30 Jul 2024, 12:26 PM
String utils in Java - july 30, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classwork-practice/article/string-utils-in-java

Refer this link :
https://appdevtools.com/string-utilities

#classworkPractice

Expected Output :

classworkpractice
String Utilities Online - AppDevTools
Counts the number of characters, words, lines, and substrings, converts a string to lowercase, uppercase, reverses a string, or splits a string with a separator.
appdevtools.com
StringUtilsExpOutput.webm
109 Views

Ranjith Kumar, Sandhiya, Vishnu H and 5 more

49 more comments


Maha Krishnan
Attachments

StringUtils.java
5.57 KB
Screenshot from 2024-08-21 17-41-03.pdf
455.58 KB

Ranjith Kumar
Attachments

StringUtils.java
4.18 KB

Sivashankaran S
Attachments

StringUtils.java
6.11 KB




Prathika Kesavan has started a conversation.

27 Jul 2024, 06:06 PM
classwork practice using string methods :

https://connect.zoho.com/portal/zohoschools-2026/manual/classwork-practice/article/classworks-practice-string-methods-22-july-2024

#classworkpractice #workflow

classworkpractice
workflow
Ranjith Kumar, Infanta Xena D L, Sandhiya and 5 more

11 more comments


Jason Chadwick P


Sivashankaran S

Priya Sri







Janarthanan Babu has started a conversation.

23 Aug 2024, 04:41 PM
NimNumber Game
Screencast from 24-08-24 10:29:05 AM IST.webm
32 Views


Ranjith Kumar, Jeshwanth S, Sandhiya and 6 more


PraveenKumar N
Completed.






Natarajan T has started a conversation.

03 Sep 2024, 12:23 PM
013 - Classworks - Understanding How equals() Works with String and StringBuilder in Java - 03 Sep 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/string-and-stringbuilder-in-java

#classwork #string

string
classwork
Ranjith Kumar, Sandhiya, Jeevitha S and 6 more


Pavithra S has started a conversation.

22 Aug 2024, 05:50 PM
Array Generator - Aug 22, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classwork-practice/article/array-generator-tool-aug-22-2024

#classworkPractice

classworkpractice
Sandhiya, Bharathi Raja D, Dhanush S and Harikrishnan V

9 more comments


Bharathi Raja D
Attachments

arrayGenerator.java
1.48 KB

Priya Sri






Abhineet Hariharan
import java.util.Scanner;
import java.util.Random;
public class ArrayCreator{
    Scanner sc = new Scanner(System.in);
    Random rnd = new Random();
    String generatedArray;
    String arrayOption = "";
    String arraySyntax = "";
    int startRange;
    int endRange;
    int stepValue;
    String leftArraySymbol;
    String rightArraySymbol;
    String seperator;
    int lengthForRandomArrays;
    public void getArrayOptions(){
        System.out.println("1: Linear Array(create uniform array in given range) \n2: Random Array(Create array with random numbers in given range)");
        System.out.print("Enter your choice: ");
        String option = sc.nextLine();
        while (!(option.equals("1")) && !(option.equals("2"))){
            System.out.println("\nInvalid input.");
            System.out.print("Enter your choice: ");
            option = sc.nextLine();
        }
        arrayOption = option;
        System.out.println();
    }
    public void getArrayRange(){
        System.out.print("Enter start range: ");
        startRange = sc.nextInt();
        System.out.print("Enter end range: ");
        endRange = sc.nextInt();
        if (arrayOption.equals("1")){
            System.out.print("Enter step value: ");
            stepValue = sc.nextInt();
        }
        else{
            System.out.print("Enter length of array: ");
            lengthForRandomArrays = sc.nextInt();
        }
        System.out.println();
    }
    public void getArraySyntax(){
        sc.nextLine();
        System.out.print("Enter the array's left  symbol: ");
        leftArraySymbol = sc.nextLine();
        System.out.print("Enter the array's right symbol: ");
        rightArraySymbol = sc.nextLine();
        System.out.print("Enter seperator value: ");
        seperator = sc.nextLine();
        System.out.println();
    }
    public void createLinearArray(){
        generatedArray = leftArraySymbol;
        for (int i = startRange; i < endRange; i += stepValue){
            generatedArray += i;
            if (i == endRange - 1){
                break;
            }
            generatedArray += seperator + " ";
        }
        generatedArray += rightArraySymbol;
    }
    public void createRandomArray(){
        generatedArray = leftArraySymbol;
        for (int i = 0; i < lengthForRandomArrays; i++){
            int randomNumber = rnd.nextInt(endRange - startRange) + startRange;
            generatedArray += randomNumber;
            if (i == lengthForRandomArrays - 1){
                break;
            }
            generatedArray += seperator + " ";
        }
        generatedArray += rightArraySymbol;
    }
    public void arrayGenerator(){
        getArrayOptions();
        getArrayRange();
        getArraySyntax();
        if (arrayOption.equals("1")){
            createLinearArray();
        }
        else{
            createRandomArray();
        }
        System.out.println("Result: " + generatedArray);
    }
    public static void main(String[] args){
        ArrayCreator obj = new ArrayCreator();
        obj.arrayGenerator();
    }
}
See more





Pavithra S has started a conversation.

20 Aug 2024, 04:12 PM
findIndex() - method in java - Aug 20, 2024

find the element's index in an array

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignment-011-array-manipulator-part-2-aug-19-2024

#assignments #findIndex

findindex
assignments
Sandhiya, Bharathi Raja D, Ramana M and 2 more

18 more comments


Karthikeyan L
Attachments

ArrayManipulator.java
3.66 KB

Ayushman Phukan
Attachments

ArrayManipulator2.java
2.37 KB

Priya Sri







Pavithra S has started a conversation.

02 Sep 2024, 05:22 PM
011 - Classworks - this and this() in Java - Sep 2, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/010-this-this-in-java-sep-2-2024

#classwork

classwork
Ranjith Kumar, Sandhiya, Rakesh E and 5 more


Prathika Kesavan has started a conversation.

30 Aug 2024, 02:35 PM
Classwork Practice - Data types - 30 Aug 2024 :

https://connect.zoho.com/portal/zohoschools-2026/manual/classwork-practice/article/find-data-type-string-or-stringbuilder-30-aug-2024

#classworkpractice #datatypes #string

string
datatypes
classworkpractice
Ranjith Kumar, Rakesh E, Sandhiya and 4 more


Prathika Kesavan has started a conversation.

30 Aug 2024, 02:01 PM
Classworks - String usages - 30 Aug 2024 :

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/string-vs-stringbuilder-usages-30-aug-2024

#classworks #string #datatypes #stringbuilder

string
datatypes
stringbuilder
classworks
Ranjith Kumar, Sandhiya, Bharathi Raja D and 2 more


Natarajan T has started a conversation.

29 Aug 2024, 01:00 PM
Class works 012 - Immutable and Mutable in java - 29 Aug 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/string-and-stringbuilder-class-29-aug-2024

#classworks #immutable

classworks
immutable
Ranjith Kumar, Rakesh E, Sandhiya and 4 more


Natarajan T has started a conversation.

22 Aug 2024, 05:52 PM
Did you know? ​​

Constructor in java - 22 Aug 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/did-you-know/article/constructor-in-java-22-aug-2024

#didyouknow #constructor

constructor
didyouknow
Tamizharasan B, Rakesh E, Sandhiya and 6 more

10 more comments


Maha Krishnan
Explanation:
First It will return error. Because, In Java you can't call one constructor from another constructor which are in same class. We should follow this rule for prevent error.

After Solving Error:
This program start from main method object creation process, where your compiler checks that already you define any constructor. Here You create parameterised constructor , so it will go to parameterised constructor for intialising values "unknown" and 2024 to the respective variables by this() method. After assigning values it will displays I am parameterised constructor before, displays default constructor. At last, By using Object we will take the value of brandName variable and displays it.

Another Way to print brandName:
We can't display non-static variable(changable) value without using Object in a static method. So we can create a non-static method outside of the main method and displays the brandName value without using Object.



Joel Raj








Bharathi Raja D
Attachments

constructor.pdf
58.0 KB




Tamizharasan B has started a conversation.

20 Aug 2024, 10:38 PM
ATM
Example Code For Declaring Variable
import java.util.Scanner;
public class Atm {
    int balance = 1000;
    Scanner scanner = new Scanner(System.in);   
     public static void main(String[] args) {
        Atm obj = new Atm();
        obj.menu();
    }
    public void withdraw(){
        System.out.println("Enter the Amount you want to withdraw : ");
        int withdraw = scanner.nextInt();
        if(withdraw<=balance){
            balance = balance-withdraw;
            System.out.println("Collect your cash ");
        }
        else{
            System.out.println("Insufficient Money");
        }
    }
    public void deposit() {
        System.out.print("Enter the Amount you want to Deposit : ");
        int deposit = scanner.nextInt();
        balance = balance + deposit;
        System.out.println("Available Balance : " + balance);
    }
    public void menu() {
        while (true) {
            System.out.println("Automated Teller Machine");
            System.out.println("Choose 1 for Withdraw");
            System.out.println("Choose 2 for Deposit");
            System.out.println("Choose 3 for Check Balance");
            System.out.println("Choose 4 for EXIT");
            System.out.print("Choose the operation you want to perform:");
            int choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    withdraw();
                    break;
                case 2:
                    deposit();
                    break;
                case 3:
                    System.out.println("Available Balance : "+balance);
                    break;
                case 4:
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid Input");
            }
        }
    }
}
Share your Examples.

Sandhiya, Mohamed Haaris, Anthony Raja. M and 15 more


Pranav Jayaprakash
​​


Sandhiya
Attachments

BankAccount.java
2.5 KB

Jagan V
​​​​​​​​​​​​​​​​​​​​​​​​





Natarajan T has started a conversation.

22 Aug 2024, 12:02 PM
Class works 011 - Constructor in java - 22 Aug 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/011-constructor-in-java-aug-22-2024

#classworks #constructor

constructor
classworks
Ranjith Kumar, Sandhiya, Bharathi Raja D and 3 more


Pavithra S has started a conversation.

23 Jul 2024, 11:41 AM
08 - String methods & Pascal Case Converter in Java - July 23, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classwork-practice/article/08-string-methods-in-java-july-23-2024

#classworks

classworks
Ranjith Kumar, Infanta Xena D L, Sandhiya and 6 more

38 more comments


Anshul Chaudhary

Ranjith Kumar

Mani Vishnu
Pascalcase.java1.38 KB
Camelcase.java830 Bytes





Natarajan T has started a conversation.

19 Aug 2024, 01:07 PM
Classworks 010 - Array Sorting - 19 Aug 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/010-array-sorting-19-aug-2024

#classworks #array

classworks
array
Ranjith Kumar, Tamizharasan B, Sandhiya and 6 more


Pavithra S has started a conversation.

09 Jul 2024, 11:34 AM
Assignment 002 - Methods (July 09, 2024)

https://connect.zoho.com/portal/zohoschools-2026/manual/java-assignments-1/article/assignement-002-methods-july-09-2024

#assignments

assignments
Ranjith Kumar, Venkata Triveni, Infanta Xena D L and 9 more

42 more comments


Jason Chadwick P

Attachments

Agechecker.java
406 Bytes
Emoji.java
506 Bytes
Password.java
431 Bytes
Grade.java
616 Bytes

Vijayaraghavan V










Dheena Rajasekaran















Pavithra S has started a conversation.

05 Aug 2024, 11:42 AM
Quiz 7 - Operators in java - Aug 5, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/quiz-1/article/quiz-7-operators-in-java-aug-5-2024

#quiz

quiz
Ranjith Kumar, Sandhiya, Rakesh E and 7 more

43 more comments


Diwahar M

Attachments

Operators.java
1.99 KB

Sivashankaran S
+5

Dhanush S
Attachments

operators.java
2.17 KB




Prathika Kesavan has started a conversation.

11 Aug 2024, 11:40 PM
Emoji's related question :


#emoji #question #assignments

assignments
question
emoji
Tamizharasan B, Sandhiya, Vijay Sai and 3 more


Prathika Kesavan has shared a link.

09 Aug 2024, 03:57 PM
Emoji's related tools:

https://magictool.ai/tool/emoji-finder/

https://webutility.io/remove-emojis-from-text

This website lists commonly used emojis

https://www.calculator6.com/remove-emojis-from-text/





Platform AI link:
https://platformai.zoho.com/home#playground

AI Emoji Finder
This tool assists you in discovering suitable Emojis for expressing your thoughts. It identifies the appropriate Emojis by analyzing your input using AI.
magictool.ai
Ranjith Kumar, Sandhiya, Vijay Sai and 3 more


Natarajan T has started a conversation.

26 Jul 2024, 06:31 PM
Work flow - Pascal case converter 26- July-2024

https://connect.zoho.com/portal/zohoschools-2026/manual/workflow/article/workflow-pascal-case-converter

#workflow

workflow
Sandhiya, Bharathi Raja D, Maha Krishnan and 10 more

6 more comments


Sivashankaran S

Ranjith Kumar

Athiya Fathima
Screenshot from 2024-08-08 19-26-14.png146.55 KB
Screenshot from 2024-08-08 19-26-26.png114.63 KB





Prathika Kesavan has started a conversation.

27 Jul 2024, 06:05 PM
Simple task using a for loop :

https://connect.zoho.com/portal/zohoschools-2026/manual/classwork-practice/article/classworks-practice-loops-22-july-2024

#classworkpractice #workflow

classworkpractice
workflow
Ranjith Kumar, Infanta Xena D L, Sandhiya and 7 more

17 more comments


Srinidhi A
Stone.java1.3 KB


Jason Chadwick P

Athiya Fathima









Pavithra S has started a conversation.

08 Aug 2024, 12:21 PM
Array in java - Aug 8, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/009-array-in-java-aug-8-2024

#classwork

classwork
Ranjith Kumar, Sandhiya, Vijay Sai and 6 more


Prathika Kesavan has started a conversation.

24 Jul 2024, 01:48 PM
classwork practice - modular programming - 24 July 2024 :

https://connect.zoho.com/portal/zohoschools-2026/manual/classwork-practice/article/classwork-practice-modular-programming-24-july-2024

#classwork #practice

practice
classwork
Ranjith Kumar, Infanta Xena D L, Sandhiya and 6 more

44 more comments


Jason Chadwick P


Sivashankaran S


Priya Sri







Natarajan T has started a conversation.

07 Aug 2024, 12:34 PM
Work flow - Increment and decrement

https://connect.zoho.com/portal/zohoschools-2026/manual/workflow/article/work-flow-increment-and-decrement

#workflow

workflow
Ranjith Kumar, Sandhiya, Rakesh E and 4 more


Pavithra S has started a conversation.

07 Aug 2024, 11:45 AM
String class methods - substring() and indexOf() - Aug 7, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/workflow/article/string-class-methods-substring-indexof

#workflow

workflow
Ranjith Kumar, Sandhiya, Bharathi Raja D and 3 more


Natarajan T has started a conversation.

08 Jul 2024, 06:29 PM
Did you know?​​

Day 02 - Java Comment - 08 July 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/did-you-know/article/day-02

Comment the reasons below...

#didyouknow

didyouknow
Jeshwanth S, Ranjith Kumar, Infanta Xena D L and 8 more

10 more comments


Venkata Triveni
(\u000d) is the carriage return character. The compiler interprets this character as a new line. When the compiler processes the code, the \u000d character turns into a new line


Ranjith Kumar


Jason Chadwick P
\u000d is a carriage return character . so its it breaks the line and runs the code after it





Prathika Kesavan has started a conversation.

19 Jul 2024, 03:08 PM
classwork - practice 6 - RetirementAgeCalc - 19 July 2024:

https://connect.zoho.com/portal/zohoschools-2026/manual/classwork-practice/article/06-classwork-practice-19-july-2024

Venkata Triveni, Ranjith Kumar, Infanta Xena D L and 8 more

34 more comments


Sivashankaran S


Dwarakesh C S
Screenshot from 2024-07-24 19-43-05.png109.08 KB


Jason Chadwick P





Prathika Kesavan has started a conversation.

18 Jul 2024, 05:07 PM
Classwork - Practice 3 - 18 July 2024:

Craft an enhanced, object-oriented implementation of the calculateCutoff method, employing three parameters to seamlessly determine the engineering cutoff.



#practice #basics #methods

practice
methods
basics
Sandhiya, Bharathi Raja D, Maha Krishnan and 10 more

48 more comments


Siva Karthik




Sivashankaran S


Jason Chadwick P





Prathika Kesavan has started a conversation.

18 Jul 2024, 04:11 PM
Classwork - Practice 2 - 18 July 2024:

Please try to complete classwork practice as soon as possible.




Venkata Triveni, Ranjith Kumar, Infanta Xena D L and 9 more

48 more comments


Sivashankaran S


Ayushman Phukan


Jason Chadwick P





Prathika Kesavan has started a conversation.

18 Jul 2024, 11:06 AM
Classwork - Practice 1 - 18 July 2024:

Write a separate method that implements the below code.




Jeshwanth S, Sandhiya, Bharathi Raja D and 10 more

50 more comments


Sivashankaran S


Ayushman Phukan
Completed



Jason Chadwick P





Natarajan T has started a conversation.

12 Jul 2024, 06:57 PM
Did you know?​​

Day 06 - Variables - 12 July 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/did-you-know/article/day-06-variables-12-july-2024

Comment on your output and its reasons below...

#didyouknow

didyouknow
Ranjith Kumar, Infanta Xena D L, Sandhiya and 8 more

14 more comments


Tamizharasan B
Local variable not initialized.
Global variable default(0).


Jason Chadwick P
global and local variable not defined


Athiya Fathima
Error :local variable is not initialized
The default value of global variable is 0





Pavithra S has started a conversation.

10 Jul 2024, 10:42 PM
Quiz 4 - Backward Compatibility in java - July 10, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/quiz-1/article/quiz-3-backward-compatibility-in-java-july-10-2024

#quiz

quiz
Ranjith Kumar, Infanta Xena D L, Sandhiya and 8 more

32 more comments


Sivashankaran S
[1] B ) No
[2] A ) Yes
[3] java -version
[4] javac -version
[5] The “javac -version” command provide information just the compiler version
[6] A ) Yes
[7] A ) Yes
[8] I | sudo update -alternatives--config java
II | sudo update -alternatives--config javac


Aadithya K S
1) No
2) Yes
3) java -version
4) javac -version
5) compiler version
6) Yes
7) No
8) i) javac: sudo update-alternatives--config javac
ii) java: sudo update-alternatives--config java


Jason Chadwick P
1) B) No
2) A) Yes
3) java -version
4) javac -version
5) javac -version only provides information compiler version
6) A) Yes
7) B) No
8) sudo update-alternatives --config javac





Natarajan T has started a conversation.

11 Jul 2024, 05:52 PM
Did you know?​​

Day 05 - ASCII values - 11 July 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/did-you-know/article/day

Comment the reasons below...👇

Ranjith Kumar, Infanta Xena D L, Sandhiya and 8 more

11 more comments


Maha Krishnan
Answer:
If we give integer value(in range of 65-91 or 97-122) for char data type it will return alphabets. Because these are the ASCII values of Alphabets. Also, If we give character value(a-z or A-Z) for integer data type then it will return ASCII value of that character.


Sivashankaran S
The char datatype changes the value 99 to c .
And the int datatype changes the value S to 83 .
This conversion is because of the function of the datatype keywords .


Jason Chadwick P
every char has its own ascii vale in range (65-91 &97-122)
for example C=99,S=83
char charvalue = 99 so char = C ;
int number = S so int number = 83 ;





Pavithra S has started a conversation.

16 Jul 2024, 04:12 PM
Quiz - 6 method and Object in java - July 16, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/quiz-1/article/quiz-5-methods-and-object-in-java-july-16-2024

#quiz

quiz
Ranjith Kumar, Infanta Xena D L, Sandhiya and 7 more

35 more comments


Sivashankaran S
[1] ZohoSchoolsOfLearning

[2] isAgeEligibility

[3] boolean

[4] age

[5] The && operator checks two conditions and if both of them are true means it return true else it returns false .

[6] You should create object for ZohoSchoolsOfLearning class inside of main method .


Padma T
upload_1721127550418.jpg1.5 MB


Jason Chadwick P
1) ZohoSchoolOfLearning
2) IsAgeEligibility
3) boolean
4) Age
5) The symbol && denotes and operator which checks two conditions and returns true only when both conditions are true.
6) create obj in Main Method





Pavithra S has started a conversation.

22 Jul 2024, 11:51 AM
Quiz 06 - Conditional statements & loops in java - July 22, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/quiz-1/article/quiz-06-conditional-statements-loops-in-java-july-22-2024

#quiz

quiz
Ranjith Kumar, Infanta Xena D L, Sandhiya and 4 more

7 more comments


Sandhiya
Attachments

Java Quiz 6.pdf
990.83 KB

Maha Krishnan
Answers:
1. Format:
Class_name Object_name = new Class_name(); // for create an object
Object_name.method(args); // for calling the method

In program:
ConditionalExamples Filter = new ConditionalExamples();
Filter.numberFilter();

2. LoopsExample obj = new LoopsExample(); // This is Object Creation
obj.printNumbers(); // This is method calling

3.import java.util.Scanner;
public class StringExample {
public String printWord(String name){
return name;
}
public static void main(String[] args) {
Scanner input = new Scanner(System.in);
System.out.println("Enter the name: ");
String name = input.nextLine();
StringExample display = new StringExample();
System.out.println(display.printWord(name));
}
}
4. OperatorDemo maximumFinder = new OperatorDemo();
maximumFinder.isGreater();

5. In line 4: myCar.drive(); // This line error.
Reason: Because, here we didn't pass speed argument. For calling method it required integer argument(speed).

6. Output : 0-5
1-4
2-3
Reason: i will increase by 1 and j will decrease by 1 until i < j.

7.Output: It will through the error: cannot find symbol( variable i). because it is local variable.
8. D) Both B and C.
9. Output: 0
2
Reason: It will add 1 and store it to the i variable two times for one iteration.

10. Output: 1
2
3
Reason: Here, Before checking the condition, i will increase by 1 and stored.

11. Output: 5
4
3
2
1
12. All options(a,b,c,d) are iterate infinite loop.
13. This code is correct.
Output: 0
1
2
14. Output: The flag is true.
15. Output: 1
2
4
8
16
Reason: Here i value will increase by multiplying 2.

Attachments

Screenshot from 2024-07-27 09-45-39.pdf
380.04 KB

Sivashankaran S
1 |
public class ConditionalExamples {
public void numberFilter()
{
int x = 20 ;
if (x < 20)
{
System.out.println ( "x is less than 20" ) ;
}
else
{
System.out.println ( "x is greater than 20" ) ;
}
}
public static void main ( String [] args ) {
ConditionalExamples show = new ConditionalExamples();
show.numberFilter();
}
}

2 |
object creation : LoopsExample obj = new LoopsExample() ;
method calling : obj.printNumbers() ;

3 |
import java.util.Scanner ;
public class StringExample {
public String printword ( String name ) {
return name ;
}
public static void main ( String [] args ) {
StringExample work = new StringExample() ;
Scanner scan = new Scanner ( System.in ) ;
String word = scan.nextLine();
System.out.println ( work.printWord ( word ) ) ;
}
}

4 |
public class OperatorDemo {
public boolean isGreator() {
int a = 10 ;
int b = 20 ;
boolean result = ( a < b ) && ( a!= ) ;
return result ;
}
public static void main ( String args [] ) {
OperatorDemo use = new OperatorDemo () ;
System.out.println ( use.isGreator() ) ;
}
}

5 |
myCar.drive() ;
^
required: int
found: no arguments
reason: actual and formal argument lists differ in length
Correct code :
public class MethodObjectDemo {
public static void main ( String [] args ) {
Car myCar = new Car() ;
myCar.drive(280) ;
}
}
class Car {
void drive ( int speed ) {
System.out.println ( "Driving at the speed ... " + speed ) ;
}
}

6 |
0-5
1-4
2-3

7 |
Test.java:6: error: cannot find symbol
System.out.println ( i ) ;
^
symbol: variable i
location: class Test
1 error

8 | D) Both B and C

9 |
0
2
4

10 |
1
2
3

11 |
5
4
3
2
1

12 |
a) for (int i = 0; i < 10; i--)
b) for (int i = 0; ; i++)
c) for (; ; )
d) for (int i = 0; i < 10; )

13 |
Yes
0 1 2

14 |
The flag is true

15 |
Test.java:3: error: illegal start of expression
for ( int i = 0 ; i < = 16 ; i*=2 ) {
^
1 error





Natarajan T has started a conversation.

31 Jul 2024, 05:35 PM
Best Practices for Using nextInt() and nextLine() Together

https://connect.zoho.com/portal/zohoschools-2026/manual/did-you-know/article/issue-in-scanner-class

#didyouknow

didyouknow
Ranjith Kumar, Sandhiya, Rakesh E and 6 more


Natarajan T
To fix this issue, use scan.nextLine() after getting an integer input and before getting a String input.




Sandhiya
About 'BUFFER':

A buffer is a temporary storage area in memory used to hold data while it is being transferred from one place to another.It holds the data what you have entered until the program process it.
When we type 6 and press "Enter".The input buffer now holds 6\n (\n represents the newline character from pressing "Enter").
nextInt() method will read the 6 from the buffer and stops at the newline character.The buffer still contains the \n.
nextLine() method is called immediately after nextInt(), it reads the remaining \n from the buffer, which results in an empty string because \n represents a new line without any characters...It will read leftover \n instead of waiting for your input.
To avoid this problem:
We want to read this \n first ,so we need to add "scanner.nextLine()" after reading integer and now this will read that leftover.

Attachments

ERROR.pdf
139.92 KB
FIXED ERROR.pdf
160.3 KB




Pavithra S has started a conversation.

31 Jul 2024, 04:26 PM
contains() method in Java - July 31, 2024


It's a tip for the contains() method. Refer this workflow

https://connect.zoho.com/portal/zohoschools-2026/manual/workflow/article/contains-method-in-java

#workflow

workflow
Ranjith Kumar, Sandhiya, Rakesh E and 3 more


Prathika Kesavan has started a conversation.

19 Jul 2024, 05:18 PM
07 - Classwork Practice - Decomposition - July 19, 2024 :

https://connect.zoho.com/portal/zohoschools-2026/manual/classwork-practice/article/07-classwork-practice-decomposition-19-july-2024

Venkata Triveni, Ranjith Kumar, Infanta Xena D L and 8 more

28 more comments


Arunkumar P


Dhanush S




Sivashankaran S




Natarajan T has started a conversation.

30 Jul 2024, 07:39 PM
Hint for String Utills - 30 July 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classwork-practice/article/hint-for-string-utils-july-30-2024

#classworkpractice

classworkpractice
Ranjith Kumar, Tamizharasan B, Sandhiya and 4 more


Pavithra S has started a conversation.

30 Jul 2024, 03:47 PM
Fireside Chat: The Art of Naming Classes in Java - July 30, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/fireside-chats/article/maintaining-the-proper-name-for

#firesidechat #namingconventions

namingconventions
firesidechat
Ranjith Kumar, Sandhiya, Bharathi Raja D and 2 more


Pavithra S has started a conversation.

05 Jul 2024, 06:57 PM
Quiz 001 Java - July 5 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/quiz-1/article/quiz-java-july-05-2024

#quiz

quiz
Ranjith Kumar, Infanta Xena D L, Sandhiya and 6 more

38 more comments


Sivashankaran S
A | javac Hello.java
B | java Hello
B | Hello.class
B | public static void main(String args[])
B | public static void main(String args[])
A | true
A | true
A | true
B | false
A | datatype variable name;
A | datatype variable name = value;
A | ;
A | int total = 10+20;
A | Yes
A | It marks the end of a statement - java


Venkata Triveni
1) javac Hello.java
2) java Hello
3) Hello.class
4) Public static void main(String args [])
5) Public static void main(String args [])
6) True
7) True
8) True
9) False
10) datatype variable name;
11) datatype variable name = value;
12)int total = 10+20
13)yes
14) It marks the end of a statement - java


Jason Chadwick P
1. javac Hello.java
2. java Hello
3. Hello.class
4. Public static void main(String [] args)
5. Public static void main(String [] args])
6. True
7. True
8. True
9. False
10. datatype variable name;
11. datatype variable name = value;
12.int total = 10+20
13.yes
14. It marks the end of a statement - java





Natarajan T has started a conversation.

05 Jul 2024, 05:15 PM
Did you know ?​​

Day 01 - Semicolon - 05 July 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/did-you-know/article/did
#didyouknow

didyouknow
You, Ranjith Kumar, Infanta Xena D L and 7 more

12 more comments


Sivashankaran S
Yeah , it will work


Venkata Triveni
Yes, It will work fine (Since ';' denotes the end of the statement)


Jason Chadwick P
it will work.





Pavithra S has started a conversation.

26 Jul 2024, 06:37 PM
Code reusability in Java work flow - 26 July, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/workflow/article/code-reusability-in-java-26-july-2024

#workflow

workflow
Ranjith Kumar, Sandhiya, Tamizharasan B and 6 more


Pavithra S has started a conversation.

19 Jul 2024, 02:33 PM
04 - Classwork Practice - July 19, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classwork-practice/article/classwork-practice-4-18-july-2024

#classworkPractice

classworkpractice
Venkata Triveni, Ranjith Kumar, Infanta Xena D L and 7 more

25 more comments


Kishor Kumar


Sivashankaran S


Arunkumar P

Attachments

UpperCase.java
451 Bytes




Jeshwanth S has started a conversation.

26 Jul 2024, 11:32 AM
Show Summary
Hey everyone!

I hope you all found our recent discussion on loops in Java informative. To recap, we covered two important types of loops: the while loop and the do-while loop. Here's a Reference Material:

while Loop...

The while loop is used to execute a block of code as long as a specified condition is true. The condition is evaluated before the execution of the loop’s body.

Syntax.
while (condition) {
    // code to be executed
}

Example.
int i = 1;
while (i <= 10) {
    System.out.println(i);
    i++;
}


Do-while Loop...( Remember this meme :Shoot first ask question later )

The do-while loop is similar to the while loop, but it guarantees that the loop’s body will be executed at least once, as the condition is evaluated after the execution of the loop’s body.

Syntax
do {
    // code to be executed
} while (condition);

Example
int i = 1;
do {
    System.out.println(i);
    i++;
} while (i <= 10);



Let's Share Real-Time Examples!

while Loop: Think of situations where you need to repeat an action while a certain condition remains true. For example, checking user input until it is valid.
do-while Loop: Consider cases where an action should be performed at least once regardless of the condition, such as displaying a menu and then asking the user if they want to see it again.

Feel free to share your examples in the comments.
Let's learn from each other and explore how these loops can be applied in real-world programming scenarios!

Looking forward to your examples!

Ranjith Kumar, Sandhiya, Tamizharasan B and 9 more


Pavithra S has started a conversation.

26 Jul 2024, 07:26 AM
006 - While loop in Java - July 26,2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classworks-1/article/006-while-loop-in-java-26-july-2024

#classwork

classwork
Ranjith Kumar, Jeshwanth S, Sandhiya and 4 more


Natarajan T has started a conversation.

24 Jul 2024, 05:24 PM
Workflow - Scanner class

https://connect.zoho.com/portal/zohoschools-2026/manual/workflow/article/workflow-scanner-class

#workflow

workflow
Ranjith Kumar, Sandhiya, Tamizharasan B and 6 more


Prathika Kesavan has started a conversation.

23 Jul 2024, 11:12 PM
Fireside chat - Refactoring the code and importance of splitting the methods :

https://connect.zoho.com/portal/zohoschools-2026/manual/classwork-practice/article/fireside-chat-refactoring-code-from-main-method-to-multiple-methods-for-pascalcase-converter

Ranjith Kumar, Sandhiya, Dhanya Sri M and 4 more


Natarajan T has started a conversation.

23 Jul 2024, 03:07 PM
Workflow - Case Convertor

https://connect.zoho.com/portal/zohoschools-2026/manual/workflow/article/work-flow-case-convertor

#workflow

workflow
Ranjith Kumar, Infanta Xena D L, Sandhiya and 3 more


Natarajan T has started a conversation.

16 Jul 2024, 04:34 PM
Did you know?​​

Day 08 - Java Fundamentals - 16 July 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/did-you-know/article/day-08-java-fundamentals-16-july-2024

#didyouknow

didyouknow
Ranjith Kumar, Infanta Xena D L, Sandhiya and 9 more

34 more comments


Dharunprasad Muthumani




Padma T
Jav.pdf566.88 KB


Maha Krishnan





Pavithra S has started a conversation.

12 Jul 2024, 06:43 PM
Quiz 5 - Methods and Variables in Java - July 12, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/quiz-1/article/quiz-4-methods-and-variables-in-java-july-12-2024

#quiz

quiz
Ranjith Kumar, Infanta Xena D L, Sandhiya and 7 more

7 more comments


Padma T
NewJava.pdf948.56 KB


Dhanush S
1) Scanner sc = new Scanner(System.in);
2) error: non-static variable x cannot be referenced from a static context (Static method can't able to access class data members directly.)
3) 5 , 10
4) cannot find symbol (because "m" is not defined)
5) Scanner sc = new Scanner(System.in);
System.out.println("Enter a number : ");
int number = sc.nextInt();
6) class Car{ //class
String brandName;
String color;
int wheels;
public void setBrandName(String brandName){
this.brandName = brandName;
}
public String getBrandName(){
return brandName;
}
public void setColor(String color){
this.color = color;
}
public String getColor(){
return color;
}
public void setWheels(int wheels){
this.wheels = wheels;
}
public int getWheels(){
return wheels;
}
public static void main(String[] args){
Car myCar = new Car(); // creating object
myCar.setBrandName("Ferrari");
myCar.setColor("Pink");
myCar.setWheels(4);
System.out.println("My car brand name is " + myCar.getBrandName());
System.out.println("My car color is " + myCar.getColor());
System.out.println("My car has " + myCar.getWheels() + " wheels");
}
}
7) Integer
8) ERROR : Variable 'm' is not defined.
9) error: variable 'number' might not have been initialized.In Java, local variables must be initialized before they are used.
10) True.
11) 0
12) When you add c1 and c2, you are actually adding their Unicode values. Therefore: int add = c1 + c2;
OUTPUT is 195.
13) error: incompatible types: possible lossy conversion from int to char
char add = c1 + c2; (To avoid the compilation error, you should use an int to store the result).
14) variable 'obj' might not have been initialized.
15)
16) STRING can store different types of values like it can store number , float , char , ...
17) d) All of them.
18) Entering into idcard creation
Entering into idcard creation
19) class Cookie{ // 'Cookie' is the CLASS
// DATA MEMBERS of a class or PROPERTIES of a class
String shape;
public static void main(String[] args){
Cookie myCookie = new Cookie(); // 'myCookie' is the OBJECT
}
}


Venkata Triveni
1) Scanner sc = new Scanner(System.in);
2) error: non-static variable x cannot be referenced from a static context (Static method can't able to access class data members directly.)
3) 5 , 10
4) cannot find symbol (because "m" is not defined)
5) Scanner sc = new Scanner(System.in);
System.out.println("Enter a number : ");
int number = sc.nextInt();
6) class Car{ //class
String brandName;
String color;
int wheels;
public void setBrandName(String brandName){
this.brandName = brandName;
}
public String getBrandName(){
return brandName;
}
public void setColor(String color){
this.color = color;
}
public String getColor(){
return color;
}
public void setWheels(int wheels){
this.wheels = wheels;
}
public int getWheels(){
return wheels;
}
public static void main(String[] args){
Car myCar = new Car(); // creating object
myCar.setBrandName("Ferrari");
myCar.setColor("Pink");
myCar.setWheels(4);
System.out.println("My car brand name is " + myCar.getBrandName());
System.out.println("My car color is " + myCar.getColor());
System.out.println("My car has " + myCar.getWheels() + " wheels");
}
}
7) Integer
8) ERROR : Variable 'm' is not defined.
9) error: variable 'number' might not have been initialized.In Java, local variables must be initialized before they are used.
10) True.
11) 0
12) When you add c1 and c2, you are actually adding their Unicode values. Therefore: int add = c1 + c2;
OUTPUT is 195.
13) error: incompatible types: possible lossy conversion from int to char
char add = c1 + c2; (To avoid the compilation error, you should use an int to store the result).
14) variable 'obj' might not have been initialized.
15)
16) STRING can store different types of values like it can store number , float , char , ...
17) d) All of them.
18) Entering into idcard creation
Entering into idcard creation
19) class Cookie{ // 'Cookie' is the CLASS
// DATA MEMBERS of a class or PROPERTIES of a class
String shape;
public static void main(String[] args){
Cookie myCookie = new Cookie(); // 'myCookie' is the OBJECT
}
}





Natarajan T has started a conversation.

22 Jul 2024, 07:10 PM
Work flow - Loop in Java

https://connect.zoho.com/portal/zohoschools-2026/manual/workflow/article/loop-in-java

#workflow

workflow
Ranjith Kumar, Infanta Xena D L, Sandhiya and 6 more


Pavithra S has started a conversation.

19 Jul 2024, 11:28 AM
05 - Classwork Practice - Find the bugs - July 19, 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/classwork-practice/article/05-classwork-practice-find-the-bugs-july-19-2024

#classworkPractice

classworkpractice
Venkata Triveni, Ranjith Kumar, Infanta Xena D L and 7 more

34 more comments


Padma T
JAVAqns.pdf147.32 KB


Venkata Triveni
+2

Vijay Raghavan







Pavithra S has started a conversation.

09 Jul 2024, 07:03 PM
Quiz 3 - July 9 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/quiz-1/article/quiz-2-july-09-2024

#quiz

quiz
Ranjith Kumar, Infanta Xena D L, Sandhiya and 6 more

22 more comments


Sivashankaran S
[1] Data types
Adhar - long
Name - String
Mobile - long
Address - String
Date - String
State - String
Pin - int

[2] (B) float myFloat = 5.6f;

[3] (B) Circle obj = new Circle();

[4]
OUTPUT
error: <identifier> expected
public Static void main (String args[])
^
error: invalid method declaration; return type required
public Static void main (String args[])
^
error: ';' expected
System.out.println("Number :" + num)
^
error: reached end of file while parsing }
^
4 errors

MINE
Error : local variable cannot be accessed by the outer method .


[5]
class Circle{
public static void main (String args[]){
Circle obj = new Circle();
}
public void area (float radius) {
float res = 3.14f radius radius ;
}
}

[6]
OUTPUT
error: <identifier> expected
public Static void main (String args[])
^
error: invalid method declaration; return type required
public Static void main (String args[])
^
error: reached end of file while parsing
}
^
3 errors

MINE
Error : There is no value declared to a variable named 'value'

[7]
OUTPUT
error: <identifier> expected
System.out.println("My name is " + name);
^
error: illegal start of type
System.out.println("My name is " + name);
^
error: ')' expected
System.out.println("My name is " + name);
^
error: ';' expected
System.out.println("My name is " + name);
^
error: illegal start of type
System.out.println("My name is " + name);
^
error: <identifier> expected
System.out.println("My name is " + name);
^
error: ';' expected
System.out.println("My name is " + name);
^
error: reached end of file while parsing
}
^
8 errors

MINE
Error : local varaible cannot to be access by the outer method


[8]
OUTPUT
error: integer number too large: 9354545440
long mobileNumber = 9354545440;
^
1 error
MINE
Error : long mobileNumber = 9354545440;
ErrorCorrection : long mobileNumber = 9354545440l;


Aadithya K S
Data Types:
1) long
2) String
3) long
4) String
5) String
6) String
7) int
Quiz:
1) b)float myFloat = 5.6f;
2) b)Circle obj = new Circle();
3) num is created as a local variable
4) suffix f is not inluded
5) value is not declared
6) name is the local variable
7) suffix l is not included


Padma T
upload_1721629190419.jpg1.5 MB





Natarajan T has started a conversation.

15 Jul 2024, 08:02 PM
Did you know?​​

Day 07 - Access class members - 15 July 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/did-you-know/article/day-07-15-july-2024

Comment your code below...

#didyouknow

didyouknow
You, Ranjith Kumar, Infanta Xena D L and 9 more

4 more comments


Tamizharasan B
we can access class members(Methods and variables)directly within the class without creating an object. by declaring the data type and return method.
And this is possible only if it is declared as static.



Sivashankaran S


Venkata Triveni
We need to create an object to call the method or variable to access it from other class






Natarajan T has started a conversation.

17 Jul 2024, 06:09 PM
Workflow - Methods and its uses

https://connect.zoho.com/portal/zohoschools-2026/manual/workflow/article/workflow-of-method-creation

#workflow

workflow
Ranjith Kumar, Tamizharasan B, Sandhiya and 5 more


Natarajan T has started a conversation.

10 Jul 2024, 06:07 PM
Did you know?​​

Day 04 - Data types - 10 July 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/did-you-know/article/day-04-data-types-10-july-2024

What happens if you don't put the suffix 'l' for long and 'f' for float ?

Comment your answers below...

Sandhiya, Bharathi Raja D, Shasanth Velluru and 10 more

Go to comment
Dinesh Karthick Kumar
The compiler will throw an error because if we didn't put 'l' or 'L' explicitly by default it takes as int(integer)
EXAMPLE
long number = 10000000000; // Compilation error: The literal 10000000000 of type int is out of range
instead
long number = 10000000000L; // This is a long
SIMILARLY,
The compiler will throw an error if we didn't put 'F' or 'f' explicitly, by default it takes as double
EXAMPLE
float number = 3.14; // Compilation error: Required type: float, Provided: double
Instead
float number = 3.14f; // This is a float
​​

7 more comments


Sandhiya




Maha Krishnan
Answer:
In JAVA, by default long values are assumed that integer and float values are assumed that double. For Assign the data type we need to add suffix for long as 'l' or 'L' and for float as 'f' or 'F'.


Sivashankaran S
If we didn't give l or L at the end of a long variable's value , it would throw an error : integer number too large .
If we didn't give f or F at the end of a float variable's value , it would throw an error : incompatible types: possible lossy conversion from double to float .







Prathika Kesavan has started a conversation.

17 Jul 2024, 05:11 PM
Workflow - method definition - 17 July 2024 :

https://connect.zoho.com/portal/zohoschools-2026/manual/workflow/article/reusing-code-for-emoji-appending

#workflow

workflow
Ranjith Kumar, Sandhiya, Bharathi Raja D and 5 more


Natarajan T has started a conversation.

17 Jul 2024, 04:09 PM
Work flow for Method Invocation :

https://connect.zoho.com/portal/zohoschools-2026/manual/workflow/article/flow-of-method-invocation

#workflow

workflow
Ranjith Kumar, Rakesh E, Sandhiya and 6 more


Prathika Kesavan has shared a link.

17 Jul 2024, 02:47 PM
https://www.classtime.com/code/544M3M

Classtime&#x3a; Teaching Tool for Student Engagement & Learning
https://www.classtime.com/code/544M3M
www.classtime.com
Ranjith Kumar, Sandhiya, Dinesh Karthick Kumar and 6 more


Natarajan T has started a conversation.

09 Jul 2024, 05:00 PM
Did you know?​​

Day 03 - Data types - 09 July 2024

https://connect.zoho.com/portal/zohoschools-2026/manual/did-you-know/article/day-03-data-types-09-july-2024

Comment your answers below...

#didyouknow

didyouknow
Ranjith Kumar, Infanta Xena D L, Mujamil S and 9 more

9 more comments


Maha Krishnan
When we try to add two byte format numbers and store sum of these in a byte format ,then It throws error.
Because, here sum of two byte type numbers is equivalent to integer type number(It will exceed range of byte). So, we may lose information. To avoid this error we need to type cast the integer type number into a byte type number.



Jeshwanth S
byte num3=(byte) (num1+num2)


Sivashankaran S
The byte data type doesn't have addition operator .
So declare byte before the addition also .
Like this ,
byte c = ( byte )( a + b )





Dinesh Karthick Kumar has started a conversation.

15 Jul 2024, 07:45 PM
Hello friends I found a small tip for vim (command prompt) users
usually how we execute our java file
1.compile it using javac FileName.java
2.Then we execute the class file using java FileName
But we do this in a single command that is java FileName.java
Try this!!

(Note:it will work only if your jdk version is 14 or above)

Ranjith Kumar, Venkata Triveni, Infanta Xena D L and 9 more


Jeshwanth S has started a conversation.

14 Jul 2024, 05:45 PM
I came across some useful information on the web and through GPT, and this looks similar to what Prathika San taught us. I'm sharing this because it might be useful to you guys too. If you want to break down complex topics into simpler terms, just try using prompts like, 'teach me this topic like teaching to a kid, i'm 5 etc...

just take this as a reference material










Janarthanan Babu, Sandhiya, Shriharan B and 14 more


Janarthanan Babu
yeah, its very easy to understand like Prathika San taught us,
thank you.





Janarthanan Babu has started a conversation.

11 Jul 2024, 10:09 PM
Show Summary
This is for your understanding.
What is JVM, JRE, JDK and JIT ?

Java Virtual Machine (JVM) is an abstract definition of a computing machine.
Java Runtime Environment (JRE) is the implementation of the JVM.
Java Development Kit (JDK) is a set of tools using which Java programs can be developed and compiled.
Just In Time Compiler (JIT) runs on the fly in the execution environment to make optimizations on the program.


Java Compiler (javac):
javac is the executable/application which compiles the .java source files into the byte code (.class files). javac is included in JDK.
Java Virtual Machine (JVM)
JVM is an abstract computing machine used to implement Java language. JVM is the key component in the Java eco system. Java's important property is platform independence and to achieve that the role of JVM is critical. The JVM sits on top of the hardware and is used to execute the Java programs. Input for the JVM is Java byte code and it interprets the instructions in the byte code thus executing the programs.
Java Runtime Environment (JRE)
Java Run-time Environment helps in running the programs. JRE contains the JVM, the java classes/packages and the run-time libraries. If we do not want to write programs, but only execute the programs written by others, then JRE alone will be sufficient.
Java Development Kit (JDK)
Java Development Kit contains two parts. One part contains the utilities like javac, debugger, jar which helps in compiling the source code (.java files) into byte code (.class files) and debug the programs. The other part is the JRE, which contains the utilities like java which help in running/executing the byte code. If we want to write programs and run them, then we need the JDK installed.
Just-in Time Compiler (JIT)
JIT compiler is a component that is part of the JVM and hence its implementation JRE. JIT runs when the Java program is interpreted and its objective is to optimize the Java program and make it efficient in terms of performance.



If any doubts , share in comment

Jeshwanth S, Sandhiya, Shriharan B and 15 more

2 more comments


Tamizharasan B
Thank you@Janarthanan Babu


Jeshwanth S
super!


Ranjith Kumar
Thank you @Janarthanan Babu , its useful for every one





Prathika Kesavan has started a conversation.

12 Jul 2024, 06:48 PM
work flow for class, properties, methods and objects :
https://connect.zoho.com/portal/zohoschools-2026/manual/workflow/article/class-properties-and-methods

#workflow

workflow
Ranjith Kumar, Jeshwanth S, Sandhiya and 6 more


Prathika Kesavan has published a Manual.

12 Jul 2024, 02:28 PM
workflow
It contains the flow of code in animations effects.


Prathika Kesavan has started a conversation.

10 Jul 2024, 09:35 PM
Flow of method calling :

https://connect.zoho.com/portal/zohoschools-2026/manual/workflow/article/object-creations-and-calling-methods

#flow

flow
Jeshwanth S, Ranjith Kumar, Infanta Xena D L and 9 more


Prathika Kesavan has published a Manual.

10 Jul 2024, 10:36 AM
Quick Dip
We’ll take a quick dip<br>and write some code, compile it, and run it. We’re talking syntax, loops, branching, and what<br>makes Java so cool. Dive in.

About
Administrators :

Did You Know ? 🤔💡
How Sql injection works?

Setup classpath in bashrc file

String Buffer and String Builder

Lamda Expression

Child threads running after the main thread ends

Thread Safe

== & .equals()

Thread uses - App example

AtomicInteger class

Need / Use of default method - interface

Try-Catch outside the loop

try catch inside for loop pros and cons.

String class in JDK 11

Textblocks in JDK13+

Encapsulation

Static Import

Ports

System.out.println()

Performance when loading data

Covariant Return Type

Covariant Return Type part 2

Marker Interface

Top Participants
(Last 30 days)

Sandhiya
5 Posts

Janaarthanan Nandan
5 Posts

Dinesh Karthick Kumar
2 Posts

Vishnu H
2 Posts

Dwarakesh C S
1 Post
Trending Tags
didyouknowassignmentsclassworkworkflowclassworkpracticequizclassworksarrayconstructorpractice
Assignments
Assignment 017 - Emoji Quiz
package zs;
import java.util.*;
public class ChessBoard {
	public static String[][]chessboard = new String[8][8];
	public static final String WHITE_KING = "♚";
    public static final String BLACK_ROOK = "♜";
    public static final String BLACK_PAWN = "♟";
    public static final String WHITE_PAWN = "♙";
    public static final String WHITE_KNIGHT = "♞";
    public static final String BLACK__KNIGHT = "♞";
    public static final String RESET = "  \033[0m";
    public static final String WHITE_BISHOP = "♗";
    public static final String BLACK_BISHOP = "♝";
    public static final String WHITE_QUEEN = "♕";
    public static final String BLACK_QUEEN = "♛";
    
	public static void main(String[] args){
		ChessBoard che=new ChessBoard();
		Scanner sc =new Scanner(System.in);
//		che.Board();
//		che.display();
//		che.boardWithPieces();
//		che.placeTheKing(5, 4);
//		che.placeTheRook(4, 5);
//		che.placeTheBishop(4, 5);
//		che.placeTheKnight(5 ,5);
		che.showMenu();
	}
    public void Board() {
//    	chessboard= new String[8][8];
    	for(int i=0;i<8;i++) {
    		for(int j=0;j<8;j++) {
    			if((i+j)%2 ==0) {
    				ChessBoard.chessboard[i][j]="   ";
    			}
    			else {
    				ChessBoard.chessboard[i][j]="   ";
    			}
    		}
    	}
    }
    public void display() {
//    	int num= MyScanner.getNumber("Enter the ID : ");
    	for(int i=0;i<8;i++) {
    		for(int j=0;j<8;j++) {
    			if((i+j)%2==0) {
    			System.out.print(mycolor.White+ChessBoard.chessboard[i][j]+mycolor.RESET);
    			
    		}
    			else {
    				System.out.print(mycolor.Black+ChessBoard.chessboard[i][j]+mycolor.RESET);
    			}
    		
    }
    		System.out.println();
    	}
    	
}
    public void boardWithPieces() {
    	for(int i=0;i<8;i++) {
    		if(i%2==0) {
    		ChessBoard.chessboard[1][i]=mycolor.Black+" "+BLACK_PAWN+" "+mycolor.RESET;
    		}
    		else if(!(i%2==0)) {
    		ChessBoard.chessboard[1][i]=mycolor.White+" "+BLACK_PAWN+" "+mycolor.RESET;
    		}
    		if(i%2==0) {
        		ChessBoard.chessboard[6][i]=mycolor.White+" "+BLACK_PAWN+" "+mycolor.RESET;
        		}
    		else if(!(i%2==0)) {
        		ChessBoard.chessboard[6][i]=mycolor.Black+" "+BLACK_PAWN+" "+mycolor.RESET;
        		}
    		
       
    	}
    	for(int i=2;i<6;i++) {
    		for(int j=0;j<8;j++) {
    			ChessBoard.chessboard[i][j]="   ";    			
    		
    		}
    	}
    	ChessBoard.chessboard[0][0]=ChessBoard.chessboard[7][7]=mycolor.White +" "+BLACK_ROOK+" "+mycolor.RESET;
    	ChessBoard.chessboard[0][7]=ChessBoard.chessboard[7][0]=mycolor.Black +" "+BLACK_ROOK+" "+mycolor.RESET;
    	ChessBoard.chessboard[0][1]=ChessBoard.chessboard[7][6]=mycolor. Black+" "+BLACK__KNIGHT+" "+mycolor.RESET;
    	ChessBoard.chessboard[0][6]=ChessBoard.chessboard[7][1]=mycolor.White +" "+BLACK__KNIGHT+" "+mycolor.RESET;
    	ChessBoard.chessboard[0][2]=ChessBoard.chessboard[7][5]=mycolor.WHITE +" "+BLACK_BISHOP+" "+mycolor.RESET;
    	ChessBoard.chessboard[0][5]=ChessBoard.chessboard[7][2]=mycolor.Black+" "+BLACK_BISHOP+" "+mycolor.RESET;
    	ChessBoard.chessboard[0][3]=ChessBoard.chessboard[7][4]=mycolor.Black+" "+WHITE_KING+" "+mycolor.RESET;
    	ChessBoard.chessboard[0][4]=ChessBoard.chessboard[7][3]=mycolor.White+" "+BLACK_QUEEN+" "+mycolor.RESET;
    	
//    	Board();
    	display();
    	
    }
    public void placeTheKing(int x,int y) {
    	Board();
    	for(int i=-1;i<2;i++) {
    		for(int j=-1;j<2;j++) {
    			int row=x+i;
    			int col=y+j;
    			if((row>-1&&row<8)&&(col>-1&&col<8)) {
    				chessboard[row][col]=" X ";
    			}
    	}
    }
    	chessboard[x][y]=" "+WHITE_KING+" ";
    	display();
    	
}
    public void placeTheRook(int x,int y) {
    	Board();
        for (int i=-chessboard.length;i<chessboard.length;i++){
            if (x-i >=0 && x-i <8){
                chessboard[x-i][y]=" X ";
            }
            if (y+i >=0 && y+i <8){
                chessboard[x][y+i]=" X ";
            }
            if (x+i==x && y+i==y){
                chessboard[x][y]=" ♖ ";
            }
        }
        display();
    
}
    public void placeTheBishop(int x,int y) {
    	Board();
    	for(int i=-chessboard.length;i<chessboard.length;i++) {
    		if (x+i >=0 && y+i<8) {
    			chessboard[x+i][y+i]=" X ";
    		}
            if ((x-i >=0 && x-i <8) && (y+i >=0 && y+i <8)){
                chessboard[x-i][y+i]=" X ";
            }
    		 if (x+i==x && y+i==y){
                 chessboard[x][y]=" ♝ ";
             }
    	}
    	display();
    }
    public void placeTheKnight(int x,int y) {
    	Board();
    	for(int i=-chessboard.length;i<chessboard.length;i++) {
    		if(x+i>=0 && y+i<8) {
    			chessboard[x+1][y+2]=" X ";
    		}
    		if(x+i>=0 && y+i<8) {
    			chessboard[x+1][y-2]=" X ";
    		}
    		if(x+i>=0 && y+i<8) {
    			chessboard[x-1][y+2]=" X ";
    		}
    		if(x+i>=0 && y+i<8) {
    			chessboard[x-1][y-2]=" X ";
    		}
    		if(x+i>=0 && y+i<8) {
    			chessboard[x+2][y-1]=" X ";
    		}
    		if(x+i>=0 && y+i<8) {
    			chessboard[x-2][y-1]=" X ";
    		}
    		if(x+i>=0 && y+i<8) {
    			chessboard[x+2][y+1]=" X ";
    		}
    		if(x+i>=0 && y+i<8) {
    			chessboard[x-2][y+1]=" X ";
    		}
    		if (x+i==x && y+i==y){
                 chessboard[x][y]=" ♞ ";
            }
    	}
    	display();
    }
    public void placeTheQueen(int x,int y) {
    	Board();
    	for(int i=-chessboard.length;i<chessboard.length;i++) {
    		if (x+i >=0 && y+i<8) {
    			chessboard[x+i][y+i]=" X ";
    		}
            if ((x-i >=0 && x-i <8) && (y+i >=0 && y+i <8)){
                chessboard[x-i][y+i]=" X ";
            }
            if (x-i >=0 && x-i <8){
                chessboard[x-i][y]=" X ";
            }
            if (y+i >=0 && y+i <8){
                chessboard[x][y+i]=" X ";
            }
    		 if (x+i==x && y+i==y){
                 chessboard[x][y]=" ♕ ";
             }
    	}
    	display();
    }
    public void showMenu() {
    	Scanner sc=new Scanner(System.in);
    	while(true){
    	System.out.println("1.Empty Board \n 2.Board with Pieces \n 3.Tutorial \n 4.Exit");
    	int choice=sc.nextInt(); 
    	switch(choice) {
    	case 1:
    		Board();
    		display();
    		break;
    	case 2:
    		boardWithPieces(); 
    		break;
    	case 3:
    		while(true) {
    		System.out.println("Choose the Piece to see the Place it moves!\n 1.King\n 2.Rook\n 3.Bishop\n 4.Queen\n 5.Knight\n 6.Exit");
    		System.out.println("Enter your choice:");
    		int op=sc.nextInt();
    		switch(op) {
    		case 1:
    			placeTheKing(4,5);
    			break;
    		case 2:
    			placeTheRook(4,5);
    			break;
    		case 3:
    			placeTheBishop(4,5);
    			break;
    		case 4:
    			placeTheQueen(4,5);
    			break;
    		case 5:
    			placeTheKnight(4,5);
    			break;
    		case 6:
    			System.exit(1);
    			
    		}
    		}
    	case 4:
    		System.exit(0);
    	}
    }
}
}
ChessBoard.java
image 21 of 64close
20
Here is your Smart Chat (Ctrl+Space)
